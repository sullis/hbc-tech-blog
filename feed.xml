<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.7.4">Jekyll</generator><link href="https://tech.hbc.com/feed.xml" rel="self" type="application/atom+xml" /><link href="https://tech.hbc.com/" rel="alternate" type="text/html" /><updated>2019-06-06T10:55:50-05:00</updated><id>https://tech.hbc.com/feed.xml</id><title type="html">HBC Tech</title><subtitle>We power the website and mobile experiences for Saks,  Saks Off Fifth, Lord &amp; Taylor and The Bay.
</subtitle><entry><title type="html">Migrations</title><link href="https://tech.hbc.com/2019-06-06-migrations.html" rel="alternate" type="text/html" title="Migrations" /><published>2019-06-06T00:00:00-05:00</published><updated>2019-06-06T00:00:00-05:00</updated><id>https://tech.hbc.com/migrations</id><content type="html" xml:base="https://tech.hbc.com/2019-06-06-migrations.html">&lt;p&gt;At HBC, we are always looking for ways to improve the digital experience for our customers. We strive to improve the customer experience as well as reduce operational cost. Like many large organizations, we have a significant investment in our digital platform. Over the past five years, we have completed multiple system migrations. This has reduced complexity and allowed our organization to focus on future opportunities.&lt;/p&gt;

&lt;p&gt;Here is a list of presentations about system migrations that we have found helpful.&lt;/p&gt;

&lt;h2 id=&quot;paying-technical-debt-at-scale-migrations--stripe&quot;&gt;Paying Technical Debt at Scale: Migrations @ Stripe&lt;/h2&gt;
&lt;p&gt;Will Larson (&lt;a href=&quot;https://twitter.com/lethain&quot;&gt;@lethain&lt;/a&gt;) at QCon San Francisco - November 2018&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=OFjvJmS_uDo&quot; title=&quot;Paying Technical Debt at Scale: Migrations @ Stripe&quot;&gt;&lt;img src=&quot;https://img.youtube.com/vi/OFjvJmS_uDo/0.jpg&quot; alt=&quot;tech debt at scale migrations at stripe video&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;spotifys-journey-to-the-cloud&quot;&gt;Spotify’s Journey to the Cloud&lt;/h2&gt;
&lt;p&gt;Spotify Engineering - Google Cloud Next 2018&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=5aBORQim-KM&quot; title=&quot;Spotify's Journey to the Cloud&quot;&gt;&lt;img src=&quot;https://img.youtube.com/vi/5aBORQim-KM/0.jpg&quot; alt=&quot;spotify google cloud video&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;the-great-migration-from-monolith-to-service-oriented-at-airbnb&quot;&gt;The Great Migration: from Monolith to Service-Oriented at Airbnb&lt;/h2&gt;
&lt;p&gt;Jessica Tai (&lt;a href=&quot;https://twitter.com/jessicamtai&quot;&gt;@jessicamtai&lt;/a&gt;) at QCon San Francisco - November 2018&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=Cy0EoQbS6RY&quot; title=&quot;The Great Migration at Airbnb&quot;&gt;&lt;img src=&quot;https://img.youtube.com/vi/Cy0EoQbS6RY/0.jpg&quot; alt=&quot;the great migration at airbnb video&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;from-activemq-to-amazon-mq--why-and-how-we-moved-to-awss-managed-solution&quot;&gt;From ActiveMQ To Amazon MQ : Why And How We Moved To AWS’s Managed Solution&lt;/h2&gt;
&lt;p&gt;Phil Whelan (&lt;a href=&quot;https://twitter.com/philwhln&quot;&gt;@philwhln&lt;/a&gt;) at Bench Engineering - January 2019&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://medium.com/bench-engineering/from-activemq-to-amazon-mq-why-and-how-we-moved-to-awss-managed-solution-afeba3ea7e23&quot; title=&quot;Bench Engineering: From ActiveMQ To Amazon MQ&quot;&gt;&lt;img src=&quot;./assets/images/migrations-2019/bench-activemq-aws-migration-480.png&quot; alt=&quot;bench-engineering-blog&quot; /&gt;&lt;/a&gt;&lt;/p&gt;</content><author><name>Sean Sullivan</name></author><category term="migrations" /><category term="microservices" /><category term="devops" /><category term="continuousdelivery" /><category term="2019" /><summary type="html">At HBC, we are always looking for ways to improve the digital experience for our customers. We strive to improve the customer experience as well as reduce operational cost. Like many large organizations, we have a significant investment in our digital platform. Over the past five years, we have completed multiple system migrations. This has reduced complexity and allowed our organization to focus on future opportunities.</summary></entry><entry><title type="html">Deployments</title><link href="https://tech.hbc.com/2019-05-29-deployments.html" rel="alternate" type="text/html" title="Deployments" /><published>2019-05-29T00:00:00-05:00</published><updated>2019-05-29T00:00:00-05:00</updated><id>https://tech.hbc.com/deployments</id><content type="html" xml:base="https://tech.hbc.com/2019-05-29-deployments.html">&lt;p&gt;At HBC, we use modern engineering practices to manage our e-commerce platform. Our engineers have adopted multiple techniques to ensure that production code deployments go smoothly.&lt;/p&gt;

&lt;p&gt;Here is a list of presentations about deployments that we have found helpful.&lt;/p&gt;

&lt;h2 id=&quot;disband-the-deployment-army&quot;&gt;Disband the Deployment Army&lt;/h2&gt;
&lt;p&gt;Michael T. Nygard (&lt;a href=&quot;https://twitter.com/mtnygard&quot;&gt;@mtnygard&lt;/a&gt;) at GOTO Aarhus - October 2012&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=Luskg9ES9qI&quot; title=&quot;Disband the Deployment Army&quot;&gt;&lt;img src=&quot;https://img.youtube.com/vi/Luskg9ES9qI/0.jpg&quot; alt=&quot;Disband the Deployment Army video&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;10-deploys-per-day-dev-and-ops-cooperation-at-flickr&quot;&gt;10+ Deploys Per Day: Dev and Ops Cooperation at Flickr&lt;/h2&gt;
&lt;p&gt;John Allspaw (&lt;a href=&quot;https://twitter.com/allspaw&quot;&gt;@allspaw&lt;/a&gt;) and Paul Hammond (&lt;a href=&quot;https://twitter.com/ph&quot;&gt;@ph&lt;/a&gt;) at Velocity conference - June 2009&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=LdOe18KhtT4&quot; title=&quot;10+ Deploys Per Day: Dev and Ops Cooperation at Flickr&quot;&gt;&lt;img src=&quot;https://img.youtube.com/vi/LdOe18KhtT4/0.jpg&quot; alt=&quot;flickr-allspaw-hammond-video&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;deployment-patterns-for-devops-and-continuous-delivery&quot;&gt;Deployment patterns for DevOps and Continuous Delivery&lt;/h2&gt;
&lt;p&gt;Danilo Sato (&lt;a href=&quot;https://twitter.com/dtsato&quot;&gt;@dtsato&lt;/a&gt;) at DevOps Singapore - May 2016&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=eBRspUcDCTc&quot; title=&quot;Deployment patterns for DevOps and Continuous Delivery&quot;&gt;&lt;img src=&quot;https://img.youtube.com/vi/eBRspUcDCTc/0.jpg&quot; alt=&quot;Deployment patterns video&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;small-batch-deployments&quot;&gt;Small Batch Deployments&lt;/h2&gt;
&lt;p&gt;Sean Sullivan (&lt;a href=&quot;https://twitter.com/tinyrobots&quot;&gt;@tinyrobots&lt;/a&gt;) - May 2019&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://speakerdeck.com/sullis/small-batch-deployments-2019-05-17&quot; title=&quot;Small Batch Deployments&quot;&gt;&lt;img src=&quot;./assets/images/deployments-2019/small-batch-deployments-2019-05-17-480.png&quot; alt=&quot;small-batch-deployments-slides&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;deployments-at-flow-commerce&quot;&gt;Deployments at Flow Commerce&lt;/h2&gt;
&lt;p&gt;Mike Bryzek (&lt;a href=&quot;https://twitter.com/mbryzek&quot;&gt;@mbryzek&lt;/a&gt;) at NYC Continuous Delivery meetup - June 2016&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=IEaA5AhS-ZY&quot; title=&quot;Deployments at Flow Commerce&quot;&gt;&lt;img src=&quot;https://img.youtube.com/vi/IEaA5AhS-ZY/0.jpg&quot; alt=&quot;Deployments at Flow Commerce video&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;four-minute-deploys&quot;&gt;Four Minute Deploys&lt;/h2&gt;
&lt;p&gt;Lei Lopez at SRECon Americas - March 2017&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=Vt82CWplMzk&quot; title=&quot;Four Minute Deploys&quot;&gt;&lt;img src=&quot;https://img.youtube.com/vi/Vt82CWplMzk/0.jpg&quot; alt=&quot;Four Minute Deploys video&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;ten-deployments-per-day&quot;&gt;Ten Deployments Per Day&lt;/h2&gt;
&lt;p&gt;Sean Sullivan (&lt;a href=&quot;https://twitter.com/tinyrobots&quot;&gt;@tinyrobots&lt;/a&gt;) - March 2019&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://speakerdeck.com/sullis/ten-deployments-per-day-2019-03-21&quot; title=&quot;Ten Deployments Per Day&quot;&gt;&lt;img src=&quot;./assets/images/deployments-2019/ten-deployments-2019-03-21-480.png&quot; alt=&quot;ten-deployments-slides&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;deployment-automation-at-uber&quot;&gt;Deployment Automation at Uber&lt;/h2&gt;
&lt;p&gt;Sebastian Yates at SRECon Americas - March 2017&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=4A4SLk1PRvg&quot; title=&quot;Deployment Automation at Uber&quot;&gt;&lt;img src=&quot;https://img.youtube.com/vi/4A4SLk1PRvg/0.jpg&quot; alt=&quot;Deployment Automation at Uber video&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;safe-lambda-deployments&quot;&gt;Safe Lambda Deployments&lt;/h2&gt;
&lt;p&gt;Sean Sullivan (&lt;a href=&quot;https://twitter.com/tinyrobots&quot;&gt;@tinyrobots&lt;/a&gt;) at Seattle Serverless Meetup - February 2019&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://speakerdeck.com/sullis/safe-lambda-deployments-seattle-2019-02-21&quot; title=&quot;Safe Lambda Deployments&quot;&gt;&lt;img src=&quot;./assets/images/deployments-2019/safe-lambda-deployments-seattle-2019-02-21-480.png&quot; alt=&quot;safe-lambda-deployment-slides&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;the-evolution-of-continuous-delivery-at-scale--linkedin&quot;&gt;The Evolution of Continuous Delivery at Scale @ Linkedin&lt;/h2&gt;
&lt;p&gt;Jason Toy (&lt;a href=&quot;https://www.linkedin.com/in/jastoy/&quot;&gt;@jastoy&lt;/a&gt;) at QCon San Francisco - November 2014&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.infoq.com/presentations/cd-linkedin/&quot; title=&quot;The Evolution of Continuous Delivery at Scale @ Linkedin&quot;&gt;&lt;img src=&quot;./assets/images/deployments-2019/linkedin-evolution-continuous-delivery-480.png&quot; alt=&quot;linkedin-continuous-delivery-presentation&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;10k-deploys-per-day---the-skyscanner-journey-so-far&quot;&gt;10K deploys per day - the Skyscanner journey so far&lt;/h2&gt;
&lt;p&gt;Stuart Davidson (&lt;a href=&quot;https://twitter.com/spedge&quot;&gt;@spedge&lt;/a&gt;) at QCon London - May 2018&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.infoq.com/presentations/12k-deployments-day&quot; title=&quot;10K deploys per day - the Skyscanner journey so far&quot;&gt;&lt;img src=&quot;./assets/images/deployments-2019/skyscanner-10k-deploys-per-day-480.png&quot; alt=&quot;10k-deploys-slides&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;deployments-endgame&quot;&gt;Deployments Endgame&lt;/h2&gt;
&lt;p&gt;Sean Sullivan (&lt;a href=&quot;https://twitter.com/tinyrobots&quot;&gt;@tinyrobots&lt;/a&gt;) - April 2019&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://speakerdeck.com/sullis/deployments-endgame-2019-04-26&quot; title=&quot;Deployments Endgame&quot;&gt;&lt;img src=&quot;./assets/images/deployments-2019/deployments-endgame-2019-04-26-480.png&quot; alt=&quot;deployments-endgame-slides&quot; /&gt;&lt;/a&gt;&lt;/p&gt;</content><author><name>Sean Sullivan</name></author><category term="deployments" /><category term="devops" /><category term="continuousdelivery" /><category term="2019" /><summary type="html">At HBC, we use modern engineering practices to manage our e-commerce platform. Our engineers have adopted multiple techniques to ensure that production code deployments go smoothly.</summary></entry><entry><title type="html">How to Deal With Time Zones in Database and Distributed Systems</title><link href="https://tech.hbc.com/2019-04-19-time-zones.html" rel="alternate" type="text/html" title="How to Deal With Time Zones in Database and Distributed Systems" /><published>2019-04-19T00:00:00-05:00</published><updated>2019-04-19T00:00:00-05:00</updated><id>https://tech.hbc.com/time-zones</id><content type="html" xml:base="https://tech.hbc.com/2019-04-19-time-zones.html">&lt;p&gt;Time zones can be one of the hardest and most confusing sources of technical issues in modern software systems. In this article we’re going to go through some common rules of thumb for dealing with datetimes when architecting those systems.&lt;/p&gt;

&lt;h1 id=&quot;first-a-standard&quot;&gt;First, a standard&lt;/h1&gt;

&lt;p&gt;The standard representation you should use for datetimes by default is ISO 8601. The ISO 8601 standard looks like this:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;YYYY-MM-DDTHH:mm:SS±hh:mm&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;For a concrete example, the date and time that Marty McFly went back to the future was:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;1955-11-12T22:04:00-08:00&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;There are obvious advantages to this standard. For one, it will natively sort lexicographically in any programming language. For another, it includes the time zone to apply maximum specificity.&lt;/p&gt;

&lt;p&gt;But the most important advantage is that it is a standard, and if you stick to it whenever possible you will find your stack easier to develop as more and more programming languages integrate features to parse and format this standard natively. I’ve worked with ISO datetimes natively in the most recent releases of Python, Java, and JavaScript. It’s particularly nice on the frontend because it guarantees the user will see the appropriate time in their current time zone.&lt;/p&gt;

&lt;p&gt;So, if the ISO 8601 standard is so great, why isn’t it commonly used in databases for its easy lexicographical sorting?&lt;/p&gt;

&lt;h1 id=&quot;why-arent-there-time-zones-in-sql&quot;&gt;Why aren’t there time zones in SQL?&lt;/h1&gt;

&lt;p&gt;Time zones didn’t exist before common usage of railroads for transportation. Prior to the railroad every town and city would maintain its own local time, and travellers would readjust their watches when they arrived in a new place. But by the time railroads criscrossed North America, Europe, and Asia it became necessary to standardize local time across wide swathes of the planet.&lt;/p&gt;

&lt;p&gt;In much the same way that the invention of railroads spurred the invention of time zones, the creation of distributed systems, microservices, and global internet businesses has spurred the adoption of time zone standards in software. However, some technologies were designed without these considerations in mind.&lt;/p&gt;

&lt;p&gt;Before the invention of distributed systems most databases and the servers that ran them were colocal in the same time zone, often on the same computer. So basically, SQL (and often other database systems) broadly assumes that datetimes you give it are in the local time zone of the machine and that the software written to update the database is also in that self-same time zone.&lt;/p&gt;

&lt;p&gt;For this reason when dealing with RDS systems it’s important to follow the following patterns.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Whenever possible, pass datetimes to the service, module, or ORM that accesses the database with time zones attached. This will assure that no unwarranted assumptions are made between dislocated services.&lt;/li&gt;
  &lt;li&gt;Set a standard and stick to it for what time zone the database uses.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Unfortunately it’s probably not in your best interests to include the time zone within the stored records of the database, this is because this would break the pattern SQL was designed to use, and for a legacy database require you do rather complex mass data operations to bring columns up to your new spec. (Daylight Saving Time begins and ends on different days every year, so it’s not merely a matter of adding the zone.)&lt;/p&gt;

&lt;h1 id=&quot;three-datetime-anti-patterns&quot;&gt;Three DateTime Anti-Patterns&lt;/h1&gt;

&lt;p&gt;In this section I’m going to talk about some common errors regarding handling datetimes and how to fix them.&lt;/p&gt;

&lt;p&gt;Datetimes &lt;a href=&quot;https://www.youtube.com/watch?v=-5wpm-gesOY&quot;&gt;are more complicated&lt;/a&gt; than even I am letting on here. But thankfully your friendly neighborhood library methods are here to help. The most complex time zone issues I’ve ever seen have involved multiple of the following sticking points.&lt;/p&gt;

&lt;h2 id=&quot;1-an-assumption-was-made-about-the-zone-of-a-datetime-by-one-piece-of-a-system-that-was-not-made-by-another&quot;&gt;1. An assumption was made about the zone of a datetime by one piece of a system that was not made by another&lt;/h2&gt;

&lt;p&gt;These issues can often be spotted with a little back of the envelope knowledge about your local time zone. For instance if you live and work in the North American Eastern Time zone (ET), and you notice that the datetimes in your database are all off by exactly 4 hours (or exactly 5, in the winter) then you might have a datetime being accidentally converted from ET to UTC.&lt;/p&gt;

&lt;h2 id=&quot;2-time-zone-conversion-was-done-manually&quot;&gt;2. Time zone conversion was done manually&lt;/h2&gt;

&lt;p&gt;This kind of error can serve to magnify the above error. Suppose you have one service that is operating in ET and a database that is storing UTC datetimes. You might think it’s sufficient to merely add four hours to the datetime, but this won’t work during the winter when ET switches from UTC-04:00 to UTC-05:00. Dynamically tracking when DST starts and ends adds additional complexity for you, because those dates are set every year (in the United States) by Congress.&lt;/p&gt;

&lt;p&gt;And of course, if the client service is ever redeployed in a different time zone this code will now fail not just in winter, but all the time.&lt;/p&gt;

&lt;p&gt;In general you should trust your programming language’s datetime representation to know what to do to correctly handle time zone conversions or other time difference calculations.&lt;/p&gt;

&lt;h2 id=&quot;3-time-zones-were-dropped-manually&quot;&gt;3. Time zones were dropped manually&lt;/h2&gt;

&lt;p&gt;Sometimes when dealing with frontend code in different browsers datetime formatting can cause unexpected errors. For instance, in most browsers the alternate form of the ISO 8601 standard &lt;code class=&quot;highlighter-rouge&quot;&gt;YYYY-MM-DDTHH:mm:SS±hhmm&lt;/code&gt; (without the colon) is accepted, but Safari is not one of them. This leads some developers to haphazardly chop out the time zones, reducing the accuracy of data when viewing your webpage internationally.&lt;/p&gt;

&lt;p&gt;This one should be a no-brainer in certain industries. For instance television, sports, and other live-streamed events absolutely positively need those time zones included for good user experience.&lt;/p&gt;

&lt;h1 id=&quot;final-thoughts&quot;&gt;Final thoughts&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;If you can, use ISO 8601 with the time zone when communicating between services.&lt;/li&gt;
  &lt;li&gt;When writing database code make sure the DAO is in charge of deciding what time zone to store data in. Don’t rely on upstream systems to translate datetimes into the DAO’s time zone.&lt;/li&gt;
  &lt;li&gt;Avoid writing code that manually does time zone conversions, always trust the language library to do this for you rather than broadly assuming you need to apply a specific offset.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://xkcd.com/1883/&quot;&gt;&lt;img src=&quot;https://imgs.xkcd.com/comics/supervillain_plan.png&quot; alt=&quot;xkcd: Supervillain Plan&quot; class=&quot;center-image&quot; /&gt;&lt;/a&gt;&lt;/p&gt;</content><author><name>Daniel Kirby</name></author><category term="time zones" /><category term="microservices" /><category term="SQL" /><category term="databases" /><summary type="html">Time zones can be one of the hardest and most confusing sources of technical issues in modern software systems. In this article we’re going to go through some common rules of thumb for dealing with datetimes when architecting those systems.</summary></entry><entry><title type="html">Presentations we love: 2019</title><link href="https://tech.hbc.com/2019-04-14-presentations-we-love.html" rel="alternate" type="text/html" title="Presentations we love: 2019" /><published>2019-04-14T00:00:00-05:00</published><updated>2019-04-14T00:00:00-05:00</updated><id>https://tech.hbc.com/presentations-we-love</id><content type="html" xml:base="https://tech.hbc.com/2019-04-14-presentations-we-love.html">&lt;p&gt;This is a list of our favorite presentations from 2019. We will update this list throughout the year.&lt;/p&gt;

&lt;h2 id=&quot;mature-microservices-and-how-to-operate-them&quot;&gt;Mature Microservices and How to Operate Them&lt;/h2&gt;
&lt;p&gt;Sarah Wells (&lt;a href=&quot;https://twitter.com/sarahjwells&quot;&gt;@sarahjwells&lt;/a&gt;) at QCon London 2019&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.infoq.com/presentations/microservices-financial-times&quot; title=&quot;Mature Microservices and How to Operate Them&quot;&gt;&lt;img src=&quot;./assets/images/presentations-we-love-2019/mature-microservices-qcon-london-2019-480.png&quot; alt=&quot;Mature Microservices video&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;building-and-scaling-high-performing-technology-organizations&quot;&gt;Building and Scaling High Performing Technology Organizations&lt;/h2&gt;
&lt;p&gt;Jez Humble (&lt;a href=&quot;https://twitter.com/jezhumble&quot;&gt;@jezhumble&lt;/a&gt;) at Agile India - March 2019&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=8z2Ki9e5OV8&quot; title=&quot;Building and Scaling High Performing Technology Organizations&quot;&gt;&lt;img src=&quot;https://img.youtube.com/vi/8z2Ki9e5OV8/0.jpg&quot; alt=&quot;High Performing Technology Organizations video&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;if-you-dont-know-where-youre-going-it-doesnt-matter-how-fast-you-get-there&quot;&gt;If You Don’t Know Where You’re Going, It Doesn’t Matter How Fast You Get There&lt;/h2&gt;
&lt;p&gt;Nicole Forsgren (&lt;a href=&quot;https://twitter.com/nicolefv&quot;&gt;@nicolefv&lt;/a&gt;) at Google Cloud Next - April 2019
&lt;a href=&quot;https://www.youtube.com/watch?v=T6Fj5RiKaWM&quot; title=&quot;If You Don't Know Where You're Going, It Doesn't Matter How Fast You Get There&quot;&gt;&lt;img src=&quot;https://img.youtube.com/vi/T6Fj5RiKaWM/0.jpg&quot; alt=&quot;Know Where You're Going video&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;safe-lambda-deployments&quot;&gt;Safe Lambda Deployments&lt;/h2&gt;
&lt;p&gt;Sean Sullivan (&lt;a href=&quot;https://twitter.com/tinyrobots&quot;&gt;@tinyrobots&lt;/a&gt;) at Seattle Serverless Meetup - February 2019&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://speakerdeck.com/sullis/safe-lambda-deployments-seattle-2019-02-21&quot; title=&quot;Safe Lambda Deployments&quot;&gt;&lt;img src=&quot;./assets/images/presentations-we-love-2019/safe-lambda-deployments-seattle-2019-02-21-480.png&quot; alt=&quot;safe-lambda-deployment-slides&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;software-design-in-the-21st-century&quot;&gt;Software Design in the 21st Century&lt;/h2&gt;
&lt;p&gt;Martin Fowler (&lt;a href=&quot;https://twitter.com/martinfowler&quot;&gt;@martinfowler&lt;/a&gt;) at Etsy Engineering speaker series - February 2019
&lt;a href=&quot;https://www.youtube.com/watch?v=6wDoopbtEqk&quot; title=&quot;Software Design in the 21st Century&quot;&gt;&lt;img src=&quot;https://img.youtube.com/vi/6wDoopbtEqk/0.jpg&quot; alt=&quot;Software Design in the 21st Century video&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;targets-application-platform&quot;&gt;Target’s Application Platform&lt;/h2&gt;
&lt;p&gt;Jay Chandrashekaran and Jim Beyers at Google Cloud Next - April 2019
&lt;a href=&quot;https://www.youtube.com/watch?v=cnHfK4MZA2Y&quot; title=&quot;Target Application Platform&quot;&gt;&lt;img src=&quot;https://img.youtube.com/vi/cnHfK4MZA2Y/0.jpg&quot; alt=&quot;Target Application Platform video&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;applying-the-serverless-mindset-to-any-tech&quot;&gt;Applying the Serverless Mindset to Any Tech&lt;/h2&gt;
&lt;p&gt;Ben Kehoe (&lt;a href=&quot;https://twitter.com/ben11kehoe&quot;&gt;@ben11kehoe&lt;/a&gt;) at ServerlessDays Boston - March 2019
&lt;a href=&quot;https://www.youtube.com/watch?v=8Rzv68K8ZOY&quot; title=&quot;Applying the Serverless Mindset to Any Tech&quot;&gt;&lt;img src=&quot;https://img.youtube.com/vi/8Rzv68K8ZOY/0.jpg&quot; alt=&quot;Applying the Serverless Mindset to Any Tech video&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;how-aws-builds-serverless-services-using-serverless&quot;&gt;How AWS builds Serverless Services Using Serverless&lt;/h2&gt;
&lt;p&gt;Chris Munns (&lt;a href=&quot;https://twitter.com/chrismunns&quot;&gt;@chrismunns&lt;/a&gt;) at ServerlessDays Boston - March 2019
&lt;a href=&quot;https://www.youtube.com/watch?v=CgVq8MGqbng&quot; title=&quot;How AWS builds Serverless Services Using Serverless&quot;&gt;&lt;img src=&quot;https://img.youtube.com/vi/CgVq8MGqbng/0.jpg&quot; alt=&quot;How AWS builds Serverless Services Using Serverless video&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;devops-vs-sre-competing-standards-or-friends&quot;&gt;DevOps Vs. SRE: Competing Standards or Friends?&lt;/h2&gt;
&lt;p&gt;Seth Vargo (&lt;a href=&quot;https://twitter.com/sethvargo&quot;&gt;@sethvargo&lt;/a&gt;) at Google Cloud Next - April 2019
&lt;a href=&quot;https://www.youtube.com/watch?v=0UyrVqBoCAU&quot; title=&quot;DevOps Vs. SRE: Competing Standards or Friends?&quot;&gt;&lt;img src=&quot;https://img.youtube.com/vi/0UyrVqBoCAU/0.jpg&quot; alt=&quot;devops-vs-sre-video&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;progressive-delivery&quot;&gt;Progressive Delivery&lt;/h2&gt;
&lt;p&gt;James Governor (&lt;a href=&quot;https://twitter.com/monkchips&quot;&gt;@monkchips&lt;/a&gt;) at QCon London 2019&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.infoq.com/presentations/progressive-delivery&quot; title=&quot;Progressive Delivery&quot;&gt;&lt;img src=&quot;./assets/images/presentations-we-love-2019/progressive-delivery-qcon-london-2019-480.png&quot; alt=&quot;Progressive Delivery video&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;how-retailers-prepare-for-black-friday-on-google-cloud-platform&quot;&gt;How Retailers Prepare for Black Friday on Google Cloud Platform&lt;/h2&gt;
&lt;p&gt;Kiran Davuluri, Jimit Ladha, and Andre Fatala at Google Cloud Next - April 2019
&lt;a href=&quot;https://www.youtube.com/watch?v=fbstGbxcni4&quot; title=&quot;How Retailers Prepare for Black Friday on Google Cloud Platform&quot;&gt;&lt;img src=&quot;https://img.youtube.com/vi/fbstGbxcni4/0.jpg&quot; alt=&quot;prepare-for-black-friday-video&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;testing-in-production-at-scale-at-uber&quot;&gt;Testing in Production at Scale at Uber&lt;/h2&gt;
&lt;p&gt;Amit Gud (&lt;a href=&quot;https://twitter.com/amitgud&quot;&gt;@amitgud&lt;/a&gt;) - SRECon19 Americas - March 25, 2019&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=nIlFmja65_g&quot; title=&quot;Testing in Production at Scale&quot;&gt;&lt;img src=&quot;https://img.youtube.com/vi/nIlFmja65_g/0.jpg&quot; alt=&quot;testing-in-production-uber-video&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;surviving-black-friday-tales-from-an-e-commerce-engineer-at-glossier&quot;&gt;Surviving Black Friday: tales From an e-commerce engineer at Glossier&lt;/h2&gt;
&lt;p&gt;Aaron Suggs (&lt;a href=&quot;https://twitter.com/ktheory&quot;&gt;@ktheory&lt;/a&gt;) - PaymentsFn - April 17, 2019&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=Jy_-l3v9zsY&quot; title=&quot;Surviving Black Friday&quot;&gt;&lt;img src=&quot;https://img.youtube.com/vi/Jy_-l3v9zsY/0.jpg&quot; alt=&quot;glossier-black-friday-video&quot; /&gt;&lt;/a&gt;&lt;/p&gt;</content><author><name>HBC Tech</name></author><category term="community" /><category term="conferences" /><category term="qcon" /><category term="aws" /><category term="cloud" /><category term="scala" /><category term="devops" /><category term="2019" /><summary type="html">This is a list of our favorite presentations from 2019. We will update this list throughout the year.</summary></entry><entry><title type="html">Make Your Own Serverless CI</title><link href="https://tech.hbc.com/2019-04-08-make-your-own-ci.html" rel="alternate" type="text/html" title="Make Your Own Serverless CI" /><published>2019-04-08T00:00:00-05:00</published><updated>2019-04-08T00:00:00-05:00</updated><id>https://tech.hbc.com/make-your-own-ci</id><content type="html" xml:base="https://tech.hbc.com/2019-04-08-make-your-own-ci.html">&lt;p&gt;Automation is essential to maximizing throughput, especially when it comes to being able to confidently release quality software. I believe that anything you find yourself repeating is a great candidate to automate. In most cases, these repetitive tasks can be represented as simple functions! So that got me thinking… maybe I can leverage &lt;a href=&quot;https://aws.amazon.com/lambda/&quot;&gt;AWS Lambda&lt;/a&gt; for this– things like pull-request review hooks and automatic package versioning + publishing.&lt;/p&gt;

&lt;p&gt;In many ways, this is like creating a more powerful and customizable version of &lt;a href=&quot;https://aws.amazon.com/codebuild/&quot;&gt;CodeBuild&lt;/a&gt;, &lt;a href=&quot;https://circleci.com&quot;&gt;CircleCI&lt;/a&gt;, or &lt;a href=&quot;https://concourse-ci.org/&quot;&gt;Concourse&lt;/a&gt; from scratch (all of which I’ve drawn inspiration from after using)! Moreover, this serverless solution costs nothing when it’s not in use and it’s much more flexible! Ultimately, this led to the creation of our own GitHub webhook “bot” we call &lt;a href=&quot;https://github.com/hbc-techie&quot;&gt;Techie&lt;/a&gt;. In this post, I want to share how easy it is to create your own extensible bot!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;After we’re done, you’ll have a Techie look-alike that is configurable with it’s own YAML file and able to leave comments on untagged pull requests, perform &lt;a href=&quot;https://www.thoughtworks.com/continuous-integration&quot;&gt;CI&lt;/a&gt; code reviews, and automatically version and publish your npm packages!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Feel free to view the completed source on &lt;a href=&quot;https://github.com/track0x1/lambot&quot;&gt;GitHub&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;

&lt;p&gt;For brevity, I’m only going to touch on the main aspects of our bot; you can reference everything else in the repo!&lt;/p&gt;

&lt;p&gt;Here’s how our bot will work:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;img src=&quot;./assets/images/make-your-own-ci/lambot-diagram.png&quot; alt=&quot;lambot-overview&quot; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
  &lt;li&gt;Lambda receives a request triggered by a GitHub webhook event&lt;/li&gt;
  &lt;li&gt;Attempt to load and parse our bots config (&lt;code class=&quot;highlighter-rouge&quot;&gt;lambot.yml&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;Run the configured actions&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let’s get to the code!&lt;/p&gt;

&lt;h2 id=&quot;making-it-configurable&quot;&gt;Making it Configurable&lt;/h2&gt;

&lt;p&gt;I like the simplicity of YAML syntax, so we’ll expect the configuration to look something like this:&lt;/p&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;hooks&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
 &lt;span class=&quot;c1&quot;&gt;# Automatic versioning &amp;amp; publishing&lt;/span&gt;
 &lt;span class=&quot;na&quot;&gt;semver&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
 &lt;span class=&quot;c1&quot;&gt;# Prefer labels on pull requests; notify if missing.&lt;/span&gt;
 &lt;span class=&quot;na&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
 &lt;span class=&quot;c1&quot;&gt;# Run commands on each push and sends a Github status&lt;/span&gt;
 &lt;span class=&quot;na&quot;&gt;codereview&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
   &lt;span class=&quot;na&quot;&gt;commands&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
     &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;echo Installing node modules...&lt;/span&gt;
     &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;npm i&lt;/span&gt;
     &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;echo Running tests...&lt;/span&gt;
     &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;npm test&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In our lambda function let’s do the following:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Get the configuration, preferably from &lt;em&gt;master&lt;/em&gt; or another predefined branch so we can consider it our config &lt;em&gt;single source of truth&lt;/em&gt;. I’ve also experimented with using the config in the branch where the event is emitted; sometimes that works better!&lt;/li&gt;
  &lt;li&gt;Parse the configuration and asynchronously run the tasks.&lt;/li&gt;
  &lt;li&gt;Send a response (success or failure).&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;yaml&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'js-yaml'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;tasks&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'./tasks'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// An object of supported tasks (functions)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Helper function that attempts to run a task&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;runTask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;taskData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// Ensure valid task provided&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tasks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;reject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`Invalid task name of '&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;' provided.`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;tasks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;taskData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// This is our lambda function&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;repoOwner&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;repository&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;owner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;login&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;repoName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;repository&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// Retrieve lambot.yml&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// If missing, hook failure (lambot.yml is required)&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// Else, load and execute tasks&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pendingTasks&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;githubClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'config'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;repoOwner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;repoName&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;yaml&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;safeLoad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'base64'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hooks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;acc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hook&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// If hook is enabled, attempt to run it and push to pending task queue&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hooks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hook&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;acc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;runTask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hook&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;githubEvent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hooks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hook&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}));&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;acc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;respond&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Missing or invalid lambot.yml.'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// Wait for all tasks to run&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pendingTasks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;respond&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Success'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I know this is a lot of code to digest, so let’s recap how this will work:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;We’re expecting a YAML configuration (&lt;code class=&quot;highlighter-rouge&quot;&gt;lambot.yml&lt;/code&gt;) to be present in the repository.&lt;/li&gt;
  &lt;li&gt;If a configuration is missing we’ll respond with a failure, otherwise, let’s try to run the specified tasks asynchronously (they each return a promise).&lt;/li&gt;
  &lt;li&gt;Wait for all tasks to run, then send a final response.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Easy enough! Now you might be wondering what a task function looks like… so let’s keep going.&lt;/p&gt;

&lt;h2 id=&quot;creating-tasks&quot;&gt;Creating Tasks&lt;/h2&gt;

&lt;p&gt;You might have noticed our example config includes three hooks… &lt;em&gt;semver&lt;/em&gt;, &lt;em&gt;labels&lt;/em&gt;, and &lt;em&gt;codereview&lt;/em&gt;. Let’s breifly go through how they will work, starting with the simplest– labels.&lt;/p&gt;

&lt;h3 id=&quot;label-task&quot;&gt;Label Task&lt;/h3&gt;

&lt;p&gt;Pull-request labels help us stay organized. The purpose of our label task will be to post a friendly comment on newly opened, unlabeled pull-requests, encouraging the user to add a label.&lt;/p&gt;

&lt;p&gt;Here’s the code:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Newly opened pull-requests without labels will receive a friendly notice&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;labelTask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;githubEvent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;githubEvent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'pull_request'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;action&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'opened'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pull_request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;repoName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;repository&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;repoOwner&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;repository&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;owner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;login&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;prNumber&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Post comment using the GitHub API&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;githubClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'comment'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;repoOwner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;repoName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;prNumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'_Hi :wave:, it&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;s Lambot!_&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;n'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;'I noticed this pull request has no assigned labels. :cry:&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;n'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;'Please remember to label your pull requests. That helps keep things organized around here. :slightly_smiling_face:'&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;semver-task&quot;&gt;Semver Task&lt;/h3&gt;

&lt;p&gt;Versioning and publishing npm packages can become quite monotonous. That’s when I got the idea… wouldn’t it be great if we could handle that automatically based off the head commit (it includes the title + commit history if you’re squashing commits), and look for &lt;code class=&quot;highlighter-rouge&quot;&gt;[breaking|feature]&lt;/code&gt; (or &lt;code class=&quot;highlighter-rouge&quot;&gt;[ci skip]&lt;/code&gt;). For example, a pull-request with &lt;code class=&quot;highlighter-rouge&quot;&gt;[breaking] Major API changes&lt;/code&gt; would cause our package to increment and publish a major version.&lt;/p&gt;

&lt;p&gt;Now, one challenge when working with Lambda + API Gateway is that your task &lt;a href=&quot;https://docs.aws.amazon.com/apigateway/latest/developerguide/limits.html&quot;&gt;must complete within 30 seconds&lt;/a&gt;. Even if we could install, lint, and test our code in 30 seconds I don’t like the possibility of random timeouts… so this is where we’ll get fancy ✨.​ For tasks that require heavy lifting, we can offload them to AWS ECS– which can run as long as they need, in any environment we want, only when we need them, therefore being cost-effective. Fantastic!&lt;/p&gt;

&lt;p&gt;Here’s what we’ll do:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;BOT_NAME&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'lambot'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Automatically version and publish repositories that are npm packages&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;semverTask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;githubEvent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// Only listen to push events on master (we don't want to version + publish every branch!),&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// ignore commits from our bot (to avoid an infinite loop of versioning + publishing)&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// ignore [ci skip] commits&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;githubEvent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'push'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;head_commit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;username&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;BOT_NAME&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;head_commit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;includes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'[ci skip]'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ref&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'refs/heads/master'&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// get_version and push_changes are helper functions baked into our Docker image&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;commands&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;'echo &quot;Installing node modules...&quot;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;'npm ci'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Determine next version&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;'increment=$(get_version)'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Create versioned commit; publish package; push versioned commit &amp;amp; tag&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;'echo &quot;Bumping version (type: $increment), publishing, and pushing...&quot;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;'npm version $increment'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;'npm publish'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;'push_changes'&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// Run the semver utility in our custom docker image&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;spawnDockerTask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;GIT_REPO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;repository&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;clone_url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;GIT_BRANCH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ref&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;DOCKER_COMMANDS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;commands&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'&amp;amp;&amp;amp;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In our semver task, we’ll call &lt;code class=&quot;highlighter-rouge&quot;&gt;spawnDockerTask&lt;/code&gt; (a utility for running a task in ECS) and pass a list of &lt;code class=&quot;highlighter-rouge&quot;&gt;commands&lt;/code&gt; to execute in our container, as well as any additional information our container will need. If the task starts successfully, &lt;code class=&quot;highlighter-rouge&quot;&gt;spawnDockerTask&lt;/code&gt; will return a resolved promise.&lt;/p&gt;

&lt;h2 id=&quot;adding-the-webhook&quot;&gt;Adding the Webhook&lt;/h2&gt;

&lt;p&gt;Finally, we need to setup a repository to use our new bot. This is the easiest part!&lt;/p&gt;

&lt;p&gt;Go to your Github repositories &lt;code class=&quot;highlighter-rouge&quot;&gt;Settings &amp;gt; Webhooks&lt;/code&gt; and add a new webhook with the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Payload URL: &lt;code class=&quot;highlighter-rouge&quot;&gt;https://your-api-gateway-url/webhook&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Content type: &lt;code class=&quot;highlighter-rouge&quot;&gt;application/json&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Secret: &lt;em&gt;your secret&lt;/em&gt; (see: &lt;a href=&quot;https://github.com/track0x1/lambot/blob/e63951a40ac4cdc173c55cade0fb0ede7b31d598/lib/config.js#L5&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;./lib/config.js&lt;/code&gt;&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Events: &lt;code class=&quot;highlighter-rouge&quot;&gt;Send me everything.&lt;/code&gt; (or select only the events you are using)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping Up&lt;/h2&gt;

&lt;p&gt;Here’s a fun exercise: try implementing the &lt;em&gt;codereview&lt;/em&gt; task yourself. &lt;em&gt;Hint: You’ll need to use the &lt;code class=&quot;highlighter-rouge&quot;&gt;config&lt;/code&gt; property passed to our task function.&lt;/em&gt; With &lt;em&gt;codereview&lt;/em&gt;, the goal is to allow a custom sequence of commands to run on each pushed commit. It’s similar to our &lt;em&gt;semver&lt;/em&gt; task, but it also utilizes the &lt;a href=&quot;https://developer.github.com/v3/repos/statuses/&quot;&gt;status API&lt;/a&gt; to report if the commands pass or fail. Once you do that, you’ll practically have built your own CI tool! How cool is that?!&lt;/p&gt;

&lt;p&gt;Automation is fun and it maximizes productivity; a win-win if you ask me! We also learned about Lambdas, ECS, and the GitHub API. Now you are fully equipped to create your own custom tasks! Feel free to reference the &lt;a href=&quot;https://developer.github.com&quot;&gt;GitHub API&lt;/a&gt; for all the different events you can use. What’s even better is that your bot can run in any repository (as long as it has access and a valid config file)! What else is there to automate? That’s now up to you!&lt;/p&gt;

&lt;p&gt;Thanks for reading.&lt;/p&gt;

&lt;p&gt;&lt;sub&gt;&lt;em&gt;Originally published at &lt;a href=&quot;https://beuteiful.com/blog/make-your-own-serverless-ci/&quot;&gt;beuteiful.com&lt;/a&gt; on April 5, 2019.&lt;/em&gt;&lt;/sub&gt;&lt;/p&gt;</content><author><name>Tom Beute</name></author><category term="continuousintegration" /><category term="devops" /><category term="2019" /><summary type="html">Automation is essential to maximizing throughput, especially when it comes to being able to confidently release quality software. I believe that anything you find yourself repeating is a great candidate to automate. In most cases, these repetitive tasks can be represented as simple functions! So that got me thinking… maybe I can leverage AWS Lambda for this– things like pull-request review hooks and automatic package versioning + publishing.</summary></entry><entry><title type="html">Small batch deployments</title><link href="https://tech.hbc.com/2019-04-02-small-batch-deployments.html" rel="alternate" type="text/html" title="Small batch deployments" /><published>2019-04-02T00:00:00-05:00</published><updated>2019-04-02T00:00:00-05:00</updated><id>https://tech.hbc.com/small-batch-deployments</id><content type="html" xml:base="https://tech.hbc.com/2019-04-02-small-batch-deployments.html">&lt;p&gt;The Hudson’s Bay Company is an organization known for challenging the status quo. HBC’s engineering group is no different. HBC engineers are constantly looking for ways to improve the speed and quality of the software that runs our business.&lt;/p&gt;

&lt;h1 id=&quot;continuous-delivery&quot;&gt;Continuous Delivery&lt;/h1&gt;
&lt;p&gt;Like many organizations, we have improved our systems by adopting &lt;a href=&quot;https://continuousdelivery.com/&quot;&gt;Continuous Delivery&lt;/a&gt; practices. Continuous Delivery isn’t a new concept. But it does take time for organizations to embrace all of the principles and to achieve its full potential.&lt;/p&gt;

&lt;h1 id=&quot;work-in-small-batches&quot;&gt;Work in small batches&lt;/h1&gt;
&lt;p&gt;One of the core &lt;a href=&quot;https://continuousdelivery.com/principles/&quot;&gt;principles&lt;/a&gt; of Continuous Delivery is “work in small batches”. Engineering teams that focus on small batch delivery can &lt;a href=&quot;https://www.youtube.com/watch?v=-OiOUwaRsXk&quot;&gt;achieve higher quality&lt;/a&gt; and better efficiency.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;./assets/images/small-batch-deployments/principles-480.png&quot; alt=&quot;principles-of-continuous-delivery&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;small-batch-deployments&quot;&gt;Small Batch Deployments&lt;/h1&gt;

&lt;p&gt;HBC employs a technique that we call “small batch deployments”. Our engineering teams favor small code deployments over large code deployments. The benefits of small deployments are self-evident:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;small deployments are easier to understand&lt;/li&gt;
  &lt;li&gt;small deployments are easier to review&lt;/li&gt;
  &lt;li&gt;small deployments are easier to test&lt;/li&gt;
  &lt;li&gt;small deployments are easier to rollback&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;small-batch-success&quot;&gt;Small Batch Success&lt;/h1&gt;

&lt;p&gt;HBC is not the only organization that practices small batch deployments. This approach has proven successful at &lt;a href=&quot;https://www.youtube.com/watch?v=nEmJ_5UHs1g&quot;&gt;Facebook&lt;/a&gt;, &lt;a href=&quot;https://www.youtube.com/watch?v=XNJ30Vy5xSg&quot;&gt;Instagram&lt;/a&gt;, &lt;a href=&quot;https://www.youtube.com/watch?v=LdOe18KhtT4&quot;&gt;Flickr&lt;/a&gt;, &lt;a href=&quot;https://codeascraft.com/2010/05/20/quantum-of-deployment/&quot;&gt;Etsy&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/davidbrunelle/status/1116169370911141888&quot;&gt;Starbucks&lt;/a&gt;, and &lt;a href=&quot;https://www.infoq.com/presentations/microservices-arch-infrastructure-cd&quot;&gt;Flow Commerce&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The notion of “small batches” has been discussed in software development literature for over a decade. The following presentation illustrates how prevalent “small batch” has become in the field of software engineering:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://speakerdeck.com/sullis/small-batch-deployments-2019-04-02&quot;&gt;&lt;img src=&quot;./assets/images/small-batch-deployments/title-slide-480.png&quot; alt=&quot;small-batch-deployments-deck&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;final-thoughts&quot;&gt;Final thoughts&lt;/h1&gt;

&lt;p&gt;The practice of “small batch deployments” has proven successful at HBC. Our engineering teams have been able to deliver higher quality systems with less risk to the business. This approach benefits both our engineers and our business stakeholders.&lt;/p&gt;</content><author><name>Sean Sullivan</name></author><category term="deployments" /><category term="continuousdelivery" /><category term="devops" /><category term="2019" /><summary type="html">The Hudson’s Bay Company is an organization known for challenging the status quo. HBC’s engineering group is no different. HBC engineers are constantly looking for ways to improve the speed and quality of the software that runs our business.</summary></entry><entry><title type="html">Presentations we love: 2018</title><link href="https://tech.hbc.com/2018-12-31-presentations-we-love.html" rel="alternate" type="text/html" title="Presentations we love: 2018" /><published>2018-12-31T00:00:00-05:00</published><updated>2018-12-31T00:00:00-05:00</updated><id>https://tech.hbc.com/presentations-we-love</id><content type="html" xml:base="https://tech.hbc.com/2018-12-31-presentations-we-love.html">&lt;p&gt;2018 was a year of growth and learning at HBC Tech. Our organization embraced new technologies and new ways of building application software.&lt;/p&gt;

&lt;p&gt;As the year comes to an end, let’s recognize some notable technical presentations from 2018.&lt;/p&gt;

&lt;h2 id=&quot;design-microservice-architectures-the-right-way&quot;&gt;Design Microservice Architectures the Right Way&lt;/h2&gt;
&lt;p&gt;Michael Bryzek (&lt;a href=&quot;https://twitter.com/mbryzek&quot;&gt;@mbryzek&lt;/a&gt;) at QCon New York 2018&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=j6ow-UemzBc&quot; title=&quot;Design Microservice Architectures the Right Way&quot;&gt;&lt;img src=&quot;https://img.youtube.com/vi/j6ow-UemzBc/0.jpg&quot; alt=&quot;Bryzek video&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;closing-loops-and-opening-minds-how-to-take-control-of-systems&quot;&gt;Closing Loops and Opening Minds: How To Take Control of Systems&lt;/h2&gt;
&lt;p&gt;Colm MacCárthaigh (&lt;a href=&quot;https://twitter.com/colmmacc&quot;&gt;@colmmacc&lt;/a&gt;) at AWS re:Invent 2018&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=O8xLxNje30M&quot; title=&quot;Closing Loops and Opening Minds: How To Take Control of Systems&quot;&gt;&lt;img src=&quot;https://img.youtube.com/vi/O8xLxNje30M/0.jpg&quot; alt=&quot;Colm AWS video&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;monoliths-migrations-and-microservices&quot;&gt;Monoliths, Migrations, and Microservices&lt;/h2&gt;
&lt;p&gt;Randy Shoup (&lt;a href=&quot;https://twitter.com/randyshoup&quot;&gt;@randyshoup&lt;/a&gt;) at Reactive Summit Montreal 2018&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=gOZFmFNl1uk&quot; title=&quot;Monoliths, Migrations, and Microservices&quot;&gt;&lt;img src=&quot;https://img.youtube.com/vi/gOZFmFNl1uk/0.jpg&quot; alt=&quot;Shoup Reactive Summit video&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;scaling-your-architecture-with-events-and-services&quot;&gt;Scaling Your Architecture with Events and Services&lt;/h2&gt;
&lt;p&gt;Randy Shoup (&lt;a href=&quot;https://twitter.com/randyshoup&quot;&gt;@randyshoup&lt;/a&gt;) at Build Stuff 2018&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=TuEQG5sUJKY&quot; title=&quot;Scaling Your Architecture with Events and Services&quot;&gt;&lt;img src=&quot;https://img.youtube.com/vi/TuEQG5sUJKY/0.jpg&quot; alt=&quot;Shoup Build Stuff video&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;microservices-at-hbc&quot;&gt;Microservices at HBC&lt;/h2&gt;
&lt;p&gt;Sean Sullivan (&lt;a href=&quot;https://twitter.com/tinyrobots&quot;&gt;@tinyrobots&lt;/a&gt;) at Portland Java User Group September 2018&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://speakerdeck.com/sullis/microservices-portland-oregon-2018-09-25&quot;&gt;&lt;img src=&quot;./assets/images/presentations-we-love-2018/microservices-at-hbc-september-2018-480.png&quot; alt=&quot;hbc-microservices-image&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;the-data-behind-devops-becoming-a-high-performer&quot;&gt;The Data Behind DevOps: Becoming a High Performer&lt;/h2&gt;
&lt;p&gt;Dr. Nicole Forsgren (&lt;a href=&quot;https://twitter.com/nicolefv&quot;&gt;@nicolefv&lt;/a&gt;) at DevOps Enterprise Summit London 2018&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=-OiOUwaRsXk&quot; title=&quot;The Data Behind DevOps: Becoming a High Performer&quot;&gt;&lt;img src=&quot;./assets/images/presentations-we-love-2018/forsgren-the-data-behind-devops-london-2018-480.png&quot; alt=&quot;Forsgren London video&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;you-only-have-to-change-one-thing-to-do-the-devops&quot;&gt;You only have to change one thing to do the DevOps&lt;/h2&gt;
&lt;p&gt;Ken Mugrage (&lt;a href=&quot;https://twitter.com/kmugrage&quot;&gt;@kmugrage&lt;/a&gt;) at DevopsDays Oslo 2018&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=MY_nVBL2RPQ&quot; title=&quot;You only have to change one thing to do the DevOps&quot;&gt;&lt;img src=&quot;./assets/images/presentations-we-love-2018/mugrage-devops-oslo-2018-480.png&quot; alt=&quot;Mugrage devops video&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;no-microservice-is-an-island&quot;&gt;No microservice is an island&lt;/h2&gt;
&lt;p&gt;Michele Titolo (&lt;a href=&quot;https://twitter.com/micheletitolo&quot;&gt;@micheletitolo&lt;/a&gt;) at QCon New York 2018&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=VOlpKO9AbyA&quot; title=&quot;No microservice is an island&quot;&gt;&lt;img src=&quot;https://img.youtube.com/vi/VOlpKO9AbyA/0.jpg&quot; alt=&quot;Michele Titolo video&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;try-catch-blocks-for-your-distributed-system&quot;&gt;Try Catch Blocks for your Distributed System&lt;/h2&gt;
&lt;p&gt;Cecilia Deng (&lt;a href=&quot;https://twitter.com/cicikendiggit&quot;&gt;@cicikendiggit&lt;/a&gt;) at REdeploy 2018&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=id9RyN6WWC4&quot; title=&quot;Try Catch Blocks for your Distributed System&quot;&gt;&lt;img src=&quot;https://img.youtube.com/vi/id9RyN6WWC4/0.jpg&quot; alt=&quot;Cecilia Deng video&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;aws-sdk-for-java-20&quot;&gt;AWS SDK for Java 2.0&lt;/h2&gt;
&lt;p&gt;Sean Sullivan (&lt;a href=&quot;https://twitter.com/tinyrobots&quot;&gt;@tinyrobots&lt;/a&gt;) at Portland Java User Group August 2018&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://speakerdeck.com/sullis/aws-sdk-for-java-version-2-dot-0-portland-oregon&quot;&gt;&lt;img src=&quot;./assets/images/presentations-we-love-2018/aws-sdk-java-august-2018-480.png&quot; alt=&quot;aws-sdk-java-image&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;testing-in-production-at-linkedin&quot;&gt;Testing in production at LinkedIn&lt;/h2&gt;
&lt;p&gt;Szczepan Faber (&lt;a href=&quot;https://twitter.com/mockitoguy&quot;&gt;@mockitoguy&lt;/a&gt;) at Devoxx Poland 2018&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=lbO6INBICpQ&quot; title=&quot;Testing in production at LinkedIn&quot;&gt;&lt;img src=&quot;https://img.youtube.com/vi/lbO6INBICpQ/0.jpg&quot; alt=&quot;Testing In Production video&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;effective-scala-reloaded&quot;&gt;Effective Scala: Reloaded&lt;/h2&gt;
&lt;p&gt;Mirco Dotta (&lt;a href=&quot;https://twitter.com/mircodotta&quot;&gt;@mircodotta&lt;/a&gt;) at Voxxed Zurich 2018&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=pAc-0TmnlcE&quot; title=&quot;Effective Scala: Reloaded&quot;&gt;&lt;img src=&quot;https://img.youtube.com/vi/pAc-0TmnlcE/0.jpg&quot; alt=&quot;Effective Scala: Reloaded video&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;building-a-social-graph-at-nike-with-amazon-neptune&quot;&gt;Building a Social Graph at Nike with Amazon Neptune&lt;/h2&gt;
&lt;p&gt;Marc Wangenheim (&lt;a href=&quot;https://twitter.com/mwangenh&quot;&gt;@mwangenh&lt;/a&gt;) and Aditya Soni (&lt;a href=&quot;https://twitter.com/adityasoni84&quot;&gt;@adityasoni84&lt;/a&gt;) at AWS re:Invent 2018&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=f7FSpT7jrX4&quot; title=&quot;Building a Social Graph at Nike with Amazon Neptune&quot;&gt;&lt;img src=&quot;https://img.youtube.com/vi/f7FSpT7jrX4/0.jpg&quot; alt=&quot;Amazon Neptune video&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;high-reliability-infrastructure-migrations&quot;&gt;High Reliability Infrastructure Migrations&lt;/h2&gt;
&lt;p&gt;Julia Evans (&lt;a href=&quot;https://twitter.com/b0rk&quot;&gt;@b0rk&lt;/a&gt;) at KubeCon Seattle 2018&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=obB2IvCv-K0&quot; title=&quot;High Reliability Infrastructure Migrations&quot;&gt;&lt;img src=&quot;https://img.youtube.com/vi/obB2IvCv-K0/0.jpg&quot; alt=&quot;Julia Evans video&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;clouds-with-silver-linings-maximising-learning-from-incidents&quot;&gt;Clouds with Silver Linings: Maximising Learning From Incidents&lt;/h2&gt;
&lt;p&gt;Ian Malpass (&lt;a href=&quot;https://twitter.com/indec&quot;&gt;@indec&lt;/a&gt;) at DevOps Minneapolis August 2018&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=oJwpyf0qJvo&quot; title=&quot;Clouds with Silver Linings: Maximising Learning From Incidents&quot;&gt;&lt;img src=&quot;https://img.youtube.com/vi/oJwpyf0qJvo/0.jpg&quot; alt=&quot;Ian Malpass video&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;web-performance-made-easy&quot;&gt;Web performance made easy&lt;/h2&gt;
&lt;p&gt;Ewa Gasperowicz and Addy Osmani at Google I/O 2018&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=Mv-l3-tJgGk&quot; title=&quot;Web performance made easy&quot;&gt;&lt;img src=&quot;https://img.youtube.com/vi/Mv-l3-tJgGk/0.jpg&quot; alt=&quot;Ewa Gasperowicz and Addy Osmani video&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;java-api-design-best-practices&quot;&gt;Java API Design Best Practices&lt;/h2&gt;
&lt;p&gt;Jonathan Giles (&lt;a href=&quot;https://twitter.com/jonathangiles&quot;&gt;@jonathangiles&lt;/a&gt;) at Devoxx Poland 2018&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=nRNUQS7IkUM&quot; title=&quot;Java API Design Best Practices&quot;&gt;&lt;img src=&quot;https://img.youtube.com/vi/nRNUQS7IkUM/0.jpg&quot; alt=&quot;Jonathan Giles video&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;cicd-for-serverless-and-containerized-applications&quot;&gt;CI/CD for Serverless and Containerized Applications&lt;/h2&gt;
&lt;p&gt;Clare Liguori (&lt;a href=&quot;https://twitter.com/clare_liguori&quot;&gt;@clare_liguori&lt;/a&gt;) at AWS re:Invent 2018&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=01ewawuL-IY&quot; title=&quot;CI/CD for Serverless and Containerized Applications&quot;&gt;&lt;img src=&quot;https://img.youtube.com/vi/01ewawuL-IY/0.jpg&quot; alt=&quot;CI/CD video&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;serverless-architectural-patterns-and-best-practices&quot;&gt;Serverless Architectural Patterns and Best Practices&lt;/h2&gt;
&lt;p&gt;Drew Dennis and Maitreya Ranganath at AWS re:Invent 2018&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=08AjVGGQaKQ&quot; title=&quot;Serverless Architectural Patterns and Best Practices&quot;&gt;&lt;img src=&quot;https://img.youtube.com/vi/08AjVGGQaKQ/0.jpg&quot; alt=&quot;Serverless patterns video&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;kafka-and-event-oriented-architecture&quot;&gt;Kafka and Event-Oriented Architecture&lt;/h2&gt;
&lt;p&gt;Jay Kreps (&lt;a href=&quot;https://twitter.com/jaykreps&quot;&gt;@jaykreps&lt;/a&gt;) at Kafka Summit SF 2018&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=HeNegOzjnJY&quot; title=&quot;Kafka and Event-Oriented Architecture&quot;&gt;&lt;img src=&quot;https://img.youtube.com/vi/HeNegOzjnJY/0.jpg&quot; alt=&quot;Jay Kreps Kafka video&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;is-kafka-a-database&quot;&gt;Is Kafka a Database?&lt;/h2&gt;
&lt;p&gt;Martin Kleppmann (&lt;a href=&quot;https://twitter.com/martinkl&quot;&gt;@martinkl&lt;/a&gt;) at Kafka Summit SF 2018&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=v2RJQELoM6Y&quot; title=&quot;Kafka and Event-Oriented Architecture&quot;&gt;&lt;img src=&quot;https://img.youtube.com/vi/v2RJQELoM6Y/0.jpg&quot; alt=&quot;Martin Kleppman Kafka video&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;filodb-real-time-in-memory-time-series-at-massive-scale&quot;&gt;FiloDB: Real-time, In-Memory Time Series at Massive Scale&lt;/h2&gt;
&lt;p&gt;Evan Chan (&lt;a href=&quot;https://twitter.com/evanfchan&quot;&gt;@evanfchan&lt;/a&gt;) at Scale By The Bay 2018&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=EkIZPZbMoNE&quot; title=&quot;FiloDB: Real-time, In-Memory Time Series at Massive Scale&quot;&gt;&lt;img src=&quot;https://img.youtube.com/vi/EkIZPZbMoNE/0.jpg&quot; alt=&quot;Evan Chan video&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;build-containers-faster-with-jib&quot;&gt;Build containers faster with Jib&lt;/h2&gt;
&lt;p&gt;Q Chen (&lt;a href=&quot;https://twitter.com/coollog&quot;&gt;@coollog&lt;/a&gt;) and Appu Goundan (&lt;a href=&quot;https://twitter.com/loosebazooka&quot;&gt;@loosebazooka&lt;/a&gt;) at Velocity Conf June 2018&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=H6gR_Cv4yWI&quot; title=&quot;Build containers faster with Jib&quot;&gt;&lt;img src=&quot;https://img.youtube.com/vi/H6gR_Cv4yWI/0.jpg&quot; alt=&quot;Jib video&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;kubernetes-is-a-platform-platform&quot;&gt;Kubernetes Is A Platform Platform&lt;/h2&gt;
&lt;p&gt;Joe Beda (&lt;a href=&quot;https://twitter.com/jbeda&quot;&gt;@jbeda&lt;/a&gt;) at DevOpsDays Seattle 2018&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=QEu6dpQnJ7A&quot; title=&quot;Kubernetes Is A Platform Platform&quot;&gt;&lt;img src=&quot;https://img.youtube.com/vi/QEu6dpQnJ7A/0.jpg&quot; alt=&quot;Joe Beda Kubernetes video&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;democratizing-distributed-systems&quot;&gt;Democratizing Distributed Systems&lt;/h2&gt;
&lt;p&gt;Brendan Burns (&lt;a href=&quot;https://twitter.com/brendandburns&quot;&gt;@brendandburns&lt;/a&gt;) at GOTO Amsterdam 2018&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=20BIsu1qiS0&quot; title=&quot;Democratizing Distributed Systems&quot;&gt;&lt;img src=&quot;https://img.youtube.com/vi/20BIsu1qiS0/0.jpg&quot; alt=&quot;Brendan Burns distributed systems video&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;the-great-migration-from-monolith-to-service-oriented-at-airbnb&quot;&gt;The Great Migration: from Monolith to Service-Oriented at AirBnb&lt;/h2&gt;
&lt;p&gt;Jessica Tai (&lt;a href=&quot;https://twitter.com/jessicamtai&quot;&gt;@jessicamtai&lt;/a&gt;) at QCon San Francisco 2018&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=Cy0EoQbS6RY&quot; title=&quot;The Great Migration: from Monolith to Service-Oriented&quot;&gt;&lt;img src=&quot;https://img.youtube.com/vi/Cy0EoQbS6RY/0.jpg&quot; alt=&quot;Jessica Tai AirBnb migration video&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;full-cycle-developers-at-netflix&quot;&gt;Full Cycle Developers at Netflix&lt;/h2&gt;
&lt;p&gt;Greg Burrell (&lt;a href=&quot;https://twitter.com/gburrell_greg&quot;&gt;@gburrell_greg&lt;/a&gt;) at QCon San Francisco 2018&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=8OorWiBfmE0&quot; title=&quot;Full Cycle Developers at Netflix&quot;&gt;&lt;img src=&quot;https://img.youtube.com/vi/8OorWiBfmE0/0.jpg&quot; alt=&quot;Full Cycle Developers video&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;why-you-need-a-software-delivery-machine&quot;&gt;Why You Need A Software Delivery Machine&lt;/h2&gt;
&lt;p&gt;Rod Johnson (&lt;a href=&quot;https://twitter.com/springrod&quot;&gt;@springrod&lt;/a&gt;) at GOTO Copenhagen 2018&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=obDhNejPM9M&quot; title=&quot;Why You Need A Software Delivery Machine&quot;&gt;&lt;img src=&quot;https://img.youtube.com/vi/obDhNejPM9M/0.jpg&quot; alt=&quot;Software Delivery video&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;paying-technical-debt-at-scale---migrations-at-stripe&quot;&gt;Paying Technical Debt at Scale - Migrations at Stripe&lt;/h2&gt;
&lt;p&gt;Will Larson (&lt;a href=&quot;https://twitter.com/lethain&quot;&gt;@lethain&lt;/a&gt;) at QCon San Francisco 2018&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=OFjvJmS_uDo&quot; title=&quot;Paying Technical Debt at Scale - Migrations at Stripe&quot;&gt;&lt;img src=&quot;https://img.youtube.com/vi/OFjvJmS_uDo/0.jpg&quot; alt=&quot;paying-technical-debt-video&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;how-aws-minimizes-the-blast-radius-of-failures&quot;&gt;How AWS Minimizes the Blast Radius of Failures&lt;/h2&gt;
&lt;p&gt;Peter Vosshall (&lt;a href=&quot;https://twitter.com/petervosshall&quot;&gt;@petervosshall&lt;/a&gt;) at AWS Re:Invent 2018&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=swQbA4zub20&quot; title=&quot;How AWS Minimizes the Blast Radius of Failures&quot;&gt;&lt;img src=&quot;https://img.youtube.com/vi/swQbA4zub20/0.jpg&quot; alt=&quot;blast-radius-video&quot; /&gt;&lt;/a&gt;&lt;/p&gt;</content><author><name>HBC Tech</name></author><category term="community" /><category term="conferences" /><category term="qcon" /><category term="aws" /><category term="cloud" /><category term="scala" /><category term="devops" /><category term="2018" /><summary type="html">2018 was a year of growth and learning at HBC Tech. Our organization embraced new technologies and new ways of building application software.</summary></entry><entry><title type="html">Microservices at HBC</title><link href="https://tech.hbc.com/2018-10-04-microservices-at-hbc.html" rel="alternate" type="text/html" title="Microservices at HBC" /><published>2018-10-04T00:00:00-05:00</published><updated>2018-10-04T00:00:00-05:00</updated><id>https://tech.hbc.com/microservices-at-hbc</id><content type="html" xml:base="https://tech.hbc.com/2018-10-04-microservices-at-hbc.html">&lt;p&gt;HBC’s commerce platform is constantly evolving to support new business requirements. Our platform’s microservice architecture enables engineering teams to rapidly build and deploy new features.&lt;/p&gt;

&lt;p&gt;In September, HBC engineers Fabrizio Fortino and Sean Sullivan gave presentations about the past, present, and future of microservices at the Hudson’s Bay Company.&lt;/p&gt;

&lt;h2 id=&quot;event-driven-microservices&quot;&gt;Event Driven Microservices&lt;/h2&gt;
&lt;p&gt;Dublin Microservices User Group&lt;br /&gt;
September 27, 2018&lt;br /&gt;
Fabrizio Fortino (&lt;a href=&quot;https://twitter.com/fabriziofortino&quot;&gt;@fabriziofortino&lt;/a&gt;)&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.slideshare.net/FabrizioFortino1/event-driven-microservices&quot;&gt;&lt;img src=&quot;./assets/images/microservices-at-hbc-2018/event-driven-microservices-hbc-dublin-2018-09-27.png&quot; alt=&quot;microservices-dublin-image&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;microservices-at-hbc&quot;&gt;Microservices at HBC&lt;/h2&gt;
&lt;p&gt;Portland Java User Group&lt;br /&gt;
September 25, 2018&lt;br /&gt;
Sean Sullivan (&lt;a href=&quot;https://twitter.com/tinyrobots&quot;&gt;@tinyrobots&lt;/a&gt;)&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://speakerdeck.com/sullis/microservices-portland-oregon-2018-09-25&quot;&gt;&lt;img src=&quot;./assets/images/microservices-at-hbc-2018/microservices-at-hbc-portland-2018-09-25-with-border.png&quot; alt=&quot;microservices-portland-image&quot; /&gt;&lt;/a&gt;&lt;/p&gt;</content><author><name>Sean Sullivan</name></author><category term="aws" /><category term="scala" /><category term="java" /><category term="kafka" /><category term="cloud" /><category term="microservices" /><category term="2018" /><summary type="html">HBC’s commerce platform is constantly evolving to support new business requirements. Our platform’s microservice architecture enables engineering teams to rapidly build and deploy new features.</summary></entry><entry><title type="html">Email: from macro-service to micro-service</title><link href="https://tech.hbc.com/2018-09-24-email-from-macro-service-to-micro-service.html" rel="alternate" type="text/html" title="Email: from macro-service to micro-service" /><published>2018-09-24T00:00:00-05:00</published><updated>2018-09-24T00:00:00-05:00</updated><id>https://tech.hbc.com/email-from-macro-service-to-micro-service</id><content type="html" xml:base="https://tech.hbc.com/2018-09-24-email-from-macro-service-to-micro-service.html">&lt;p&gt;Email Engineering recently migrated all transactional emails to CNS v2. This was a slow migration as CNS v1, although, referred to as a micro service was anything but one! We inherited CNS v1 towards the end of last year and started migration to CNS v2 in the beginning of this year. In doing so, we followed what could be labeled as a flavor of &lt;a href=&quot;https://docs.microsoft.com/en-us/azure/architecture/patterns/strangler&quot;&gt;Strangler pattern&lt;/a&gt;. In this blog, I will share how we accomplished this task and also provide a detailed view of the new CNS (CNS v2).&lt;/p&gt;

&lt;h1 id=&quot;cns&quot;&gt;CNS&lt;/h1&gt;
&lt;p&gt;HBC Customer Notification Service (CNS) processes and sends transactional emails for Saks, Saks Off 5th and Lord and Taylor banners. CNS consumes events from Order Management System (OMS), renders the event payload into emails and sends them via CheetahMail. CNS also sends SMS notifications via Vibes SMS for applicable events and users. With CNS v2 and consequently the breakdown of v1 monolith into true micro services, the acronym CNS now stands for Customer Notification “System”.&lt;/p&gt;

&lt;h1 id=&quot;cns-v2&quot;&gt;CNS v2&lt;/h1&gt;
&lt;p&gt;CNS v2 is developed for the Cloud and is 100% hosted on AWS. It breaks down the v1 monolith into three micro services, namely- &lt;code class=&quot;highlighter-rouge&quot;&gt;svc-mq-consumer&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;api-customer-notification&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;lib-email-render&lt;/code&gt;. The v2 architecture and the three new components are explained below.&lt;/p&gt;

&lt;h2 id=&quot;architecture&quot;&gt;Architecture&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;./assets/images/cns-v2/cns-v2-arch-diagram.png&quot; alt=&quot;alt text&quot; /&gt;&lt;/p&gt;
&lt;h3 id=&quot;svc-mq-consumer&quot;&gt;Svc-mq-consumer&lt;/h3&gt;
&lt;p&gt;This component is an IBM MQ message handler/consumer. After polling for messages from the queue, it &lt;code class=&quot;highlighter-rouge&quot;&gt;POSTs&lt;/code&gt; the message payload to the api-customer-notification’s &lt;code class=&quot;highlighter-rouge&quot;&gt;/send_email&lt;/code&gt; endpoint.&lt;/p&gt;

&lt;h3 id=&quot;api-customer-notification&quot;&gt;Api-customer-notification&lt;/h3&gt;
&lt;p&gt;This component, written as a Lambda function, exposes the CNS API. After receiving a &lt;code class=&quot;highlighter-rouge&quot;&gt;/send_email&lt;/code&gt; request from the consumer, the api invokes the &lt;code class=&quot;highlighter-rouge&quot;&gt;lib-email-render&lt;/code&gt; Lambda function for rendering it into HTML. On receiving the HTML response, the api’s thin Email Gateway wrapper sends the HTML payload with relevant data to CheetahMail. The api stores both the message payload received from the consumer and the final rendered email HTML in Aurora MySql DB. It also exposes this data as a powerful dashboard for troubleshooting and QA testing. As the dashboard is exposed to all HBC and is used by multiple teams, it is gaining popularity and traffic and now merits to exist on its own as a &lt;code class=&quot;highlighter-rouge&quot;&gt;web&lt;/code&gt; component in the coming days.&lt;/p&gt;

&lt;h3 id=&quot;lib-email-render&quot;&gt;Lib-email-render&lt;/h3&gt;
&lt;p&gt;The lib Lambda function holds all the business logic needed to render an email HTML from an event message. Most of the business logic from CNS v1 is migrated to this component.&lt;/p&gt;

&lt;h1 id=&quot;strangling-cns-v1&quot;&gt;Strangling CNS v1&lt;/h1&gt;
&lt;h2 id=&quot;phase-1---using-cns-v1-as-message-consumer-and-repeater&quot;&gt;Phase 1 - Using CNS v1 As Message Consumer and Repeater&lt;/h2&gt;
&lt;p&gt;Once CNS v2 started taking shape, the team discussed steps to phase out CNS v1. First, we decided that this should be a banner by banner transition. This would help in streamlining the team’s efforts and also prevent business impact across banners if something were to break. Next, we agreed on using CNS v1 as simply a message consumer, which would receive the message off the IBM MQ queue and send the payload to CNS v2’s &lt;code class=&quot;highlighter-rouge&quot;&gt;api-customer-notification&lt;/code&gt; component. This meant that our two core components (api and lib) were in play and the team could focus its efforts on developing and testing those.&lt;/p&gt;

&lt;p&gt;We launched both Saks and Lord and Taylor on CNS v2 in Production with this setup on Apr 5.&lt;/p&gt;

&lt;h2 id=&quot;phase-2---using-svc-mq-consumer-as-message-consumer-for-o5&quot;&gt;Phase 2 - Using &lt;code class=&quot;highlighter-rouge&quot;&gt;svc-mq-consumer&lt;/code&gt; As Message Consumer for O5&lt;/h2&gt;
&lt;p&gt;Once Saks and Lord and Taylor were on CNS v2 (using CNS v1 as message consumer), we focused our attention to migrate Saks Off 5th to CNS v2.
By now, the two new CNS v2 components (api and lib) were stable in Production (for Saks and Lord and Taylor). We took some time to enhance CloudWatch logging and metrics for both these new components. We also enhanced the api dashboard in this time to facilitate troubleshooting and added features such as email preview and resend.&lt;/p&gt;

&lt;p&gt;At this time, the team felt confident to undertake a full migration for Saks Off 5th, including replacing CNS v1 with our brand new &lt;code class=&quot;highlighter-rouge&quot;&gt;svc-mq-consumer&lt;/code&gt; component. Since CNS v1 was not used in this flow, we had to shut down CNS v1 completely for Saks Off 5th. This was essential as the underlying infrastructure- the queues, OMS - were common to both CNS v1 and v2 and having v1 linger around could lead to unexpected results.&lt;/p&gt;

&lt;p&gt;O5 migrated completely on CNS v2 in Production on Aug 14.&lt;/p&gt;

&lt;h2 id=&quot;phase-3---shutting-down-cns-v1-and-clean-up&quot;&gt;Phase 3 - Shutting Down CNS v1 and Clean up&lt;/h2&gt;
&lt;p&gt;By now, all three CNS v2 components were taking live Production traffic.The team took some time to put CW logging and metrics in the consumer component. Finally, we decided it was time to shut down CNS v1 for good. Time to draw the curtains, roll the credits! It was great knowing you, CNS v1!&lt;/p&gt;

&lt;p&gt;Three teams- Engineering, QA and Infra, joined forces to co-ordinate this effort. It was crucial that old CNS v1 Docker instances were removed, new CNS v2 components were enabled and their connectivity with queues etc. were established and verified. Also, the end to end flow from order placement on website to receiving emails was to be verified. The Go pipelines that were used to build and deploy code for CNS v1 were to be paused and subsequently disabled (so that no one is able to resurrect CNS v1 even by mistake). Finally, the &lt;code class=&quot;highlighter-rouge&quot;&gt;nagios&lt;/code&gt; alerts for CNS v1 were disabled and its Mongo DB servers decommissioned.&lt;/p&gt;

&lt;p&gt;CNS v1 was shut down for all banners on Sep 6.&lt;/p&gt;

&lt;h1 id=&quot;cns-v2-ci-and-cd&quot;&gt;CNS v2 CI and CD&lt;/h1&gt;
&lt;p&gt;CNS v2 follows Continuous Integration (CI) and is set up for Continuous Delivery (CD), but the latter is currently disabled. Two pieces need to be in place for us to push code to Production with a high degree of confidence- A reliable infrastructure, with high availability and scalability, and a development workflow with adequate checks and measures that guarantees only high quality, bug free code reaches Production. While hosting all of CNS v2 in AWS takes care of the robust infrastructure piece, it is the development workflow that the team is working to continuously improve.&lt;/p&gt;

&lt;p&gt;When we inherited CNS v1, the unit tests’ code coverage was barely 40%. Today, CNS v2 has close to 75% code coverage (and is increasing every day). The CloudWatch (CW) alerts are set up by banner and by email type and are integrated with PagerDuty. We are in the process of improving our metrics in CW so that if incidents happen, we are able to quantify their impact with precision. We are also integrating our Lambda deployments with New Relic so as to provide greater visibility to SRE and Ops teams. CW Logging is already in place for all components. We feel that we are almost there and should be able to enable CD in the next couple of weeks.&lt;/p&gt;

&lt;h1 id=&quot;final-thoughts&quot;&gt;Final Thoughts&lt;/h1&gt;
&lt;p&gt;While we are forever in debt of the old CNS, the new CNS opens up a world of possibilities. All transactional emails across all banners are getting a fresh, modern look as I write this, made possible with new found powers of CNS v2. Bay emails migration to CNS follows soon. Business (Marketing) loves the new CNS and they feel emboldened to try out new features and products in the coming days and months. The team has a spring in its stride and has so much to look forward to. Happy days lie ahead filled with all good things!&lt;/p&gt;</content><author><name>Kinshuk Varshney</name></author><category term="cns" /><category term="aws" /><category term="lambda" /><category term="email" /><category term="architecture" /><category term="scala" /><category term="microservices" /><summary type="html">Email Engineering recently migrated all transactional emails to CNS v2. This was a slow migration as CNS v1, although, referred to as a micro service was anything but one! We inherited CNS v1 towards the end of last year and started migration to CNS v2 in the beginning of this year. In doing so, we followed what could be labeled as a flavor of Strangler pattern. In this blog, I will share how we accomplished this task and also provide a detailed view of the new CNS (CNS v2).</summary></entry><entry><title type="html">Would You Rather be Awesome or Deadly?</title><link href="https://tech.hbc.com/2018-07-30-hbc-health-checks.html" rel="alternate" type="text/html" title="Would You Rather be Awesome or Deadly?" /><published>2018-07-30T00:00:00-05:00</published><updated>2018-07-30T00:00:00-05:00</updated><id>https://tech.hbc.com/hbc-health-checks</id><content type="html" xml:base="https://tech.hbc.com/2018-07-30-hbc-health-checks.html">&lt;p&gt;Over a year ago we began to experiment with new ways of helping our teams in finding their next improvement opportunities. We started with an assumption that while every team is unique, there must be a way to approach a “team health” conversation in a similar fashion across them all. By using a standardized assessment we also expected to find some areas in which organizational improvements would be beneficial. In our quest for a suitable tool, we borrowed, fine-tuned and iterated to finally arrive at the health checks that fit our needs. This blog post is a reflection on the evolution of team health checks in HBC.&lt;/p&gt;

&lt;h2 id=&quot;searching-for-the-right-tool&quot;&gt;Searching for the right tool&lt;/h2&gt;
&lt;p&gt;Basic Google search came back with a number of options for measuring team effectiveness. Eliminating paid options and the options described in a very dry corporate language, we ended up looking at the good old &lt;a href=&quot;https://labs.spotify.com/2014/09/16/squad-health-check-model/&quot;&gt;Spotify Squad Health Check&lt;/a&gt; described by Henrik Kniberg and the &lt;a href=&quot;http://yuvalyeret.com/using-the-spotify-squad-health-check-beyond-the-squad/&quot;&gt;gamified Kahoot! version&lt;/a&gt; of it shared by Yuval Yeret. While both authors described the use of these assessments for co-located teams, the Kahoot! version had all the potential to be a good fit for distributed teams as well.&lt;/p&gt;

&lt;p&gt;It’s worth noting that while the majority of our teams are co-located, it is not unusual for any of them to have a team member who one day would need to work from home, from a hotel room in a different country or even from a boat!&lt;/p&gt;

&lt;p&gt;Naturally, our tools have to be flexible enough and work equally well for people “in the room” and for their “accidentally-virtual” colleagues.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/iHzUVEHl.png&quot; alt=&quot;Kahoot&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;While by itself Kahoot! doesn’t generate any visual graphs, with a bit of conditional formatting and macros one can easily turn the raw data extracted into something more visually engaging.&lt;/p&gt;

&lt;p&gt;The first round of Kahoot! Health Checks was kicked off with 8 teams in September 2016. Based on their feedback, the following four qualities of this approach stood out the most:&lt;/p&gt;

&lt;h3 id=&quot;fast&quot;&gt;Fast&lt;/h3&gt;

&lt;p&gt;Nobody likes meetings. Luckily, using Kahoot! we could shorten the time needed to run health checks to 15 min, including the time to generate a chart. Followed by a focused 15 min mini-retrospective with the participants, in only half an hour we were able to discover and zoom into the biggest problem areas of a team.&lt;/p&gt;

&lt;h3 id=&quot;anonymous&quot;&gt;Anonymous&lt;/h3&gt;

&lt;p&gt;One may argue that team members should feel psychologically safe and be open enough to take this survey using their real names. When running this health check, we observed a mix of safety levels. In some teams, the real names were used; for others the ability to use “nicknames” really enabled the openness of their responses. For many team members, though, this feature provided an extra opportunity to have fun and show off their creativity in coming up with funny nicknames.&lt;/p&gt;

&lt;h3 id=&quot;fun&quot;&gt;Fun&lt;/h3&gt;

&lt;p&gt;Gamified format, engaging music, bright colors and fun pictures - these are just a few elements that make this survey fun. Unlike some of the traditional surveys that are taken by each team member in isolation, this one brings the entire team together for a shared experience and laughter. Bonus feature - this shared experience increases the feeling of psychological safety, preparing the team for deep conversations over survey results.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/BSIoBTNl.png&quot; alt=&quot;Fun&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;accurate&quot;&gt;Accurate&lt;/h3&gt;

&lt;p&gt;In spite of a relatively simplistic, fast and humorous approach, the results of the surveys turned out to be pretty accurate, highlighting the areas of improvements and the areas that the teams felt good about.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/F3tJqRzl.png&quot; alt=&quot;Accurate&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;fine-tuning-for-the-cultural-fit&quot;&gt;Fine-tuning for the cultural fit&lt;/h2&gt;

&lt;p&gt;To our biggest surprise, as much as the teams in US supported our first experiment with the health checks, the teams in Ireland cringed at it. As it turned out, the language of the response options (“Awesome”, “Crappy” or “Meh”) which we copied from the original Spotify squad check, didn’t really resonate with them. It was the time for us to customize the health check for a cultural fit and learn some &lt;a href=&quot;https://theculturetrip.com/europe/ireland/articles/irish-slang-terms-you-need-to-know/&quot;&gt;Irish slang&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;We polled our Dublin team members to find the Irish equivalents of the response options we needed. This was when I discovered that “&lt;strong&gt;Grand&lt;/strong&gt;” is just &lt;em&gt;“OK&lt;/em&gt; or &lt;em&gt;Meh”&lt;/em&gt; in Dublin;&lt;/p&gt;

&lt;p&gt;“&lt;strong&gt;Deadly&lt;/strong&gt;” is actually pretty &lt;em&gt;Good&lt;/em&gt;, even &lt;em&gt;Excellent&lt;/em&gt;; whereas “&lt;strong&gt;Banjaxed&lt;/strong&gt;” is “&lt;em&gt;Broken, beyond repair&lt;/em&gt;”.&lt;/p&gt;

&lt;p&gt;With this fine-tuning we also replaced “Players vs. Pawns” category with “Autonomy”, which in our opinion better reflects the intent of this statement:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&quot;We are in control of our own destiny. 
 We decide what to build and how to build it for the best impact.&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The next version of the health checks was taken by 21 teams from Dublin and New York and completed by October 2017.  For the first time in the HBC Tech history a comprehensive view into the health of our teams across the org was created and provided the insights into some of the systemic issues in organization.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/pN4tawUl.png?2&quot; alt=&quot;Total&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;improving-the-teams-and-the-organization&quot;&gt;Improving the teams and the organization&lt;/h2&gt;

&lt;p&gt;Making things visible was just a first step on our bumpy road towards improvement. Next we ran team-level retrospectives, shared the summary view with the entire tech team and facilitated an &lt;a href=&quot;http://www.openspaceworld.com/users_guide.htm&quot;&gt;Open Space event&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;open-space&quot;&gt;Open Space&lt;/h3&gt;

&lt;p&gt;As I was walking the circle, introducing the group to Open Space, I was a bit nervous. This was another big experiment for HBC. How will the group take it? What if there would be an awkward silence and nothing would get proposed as topics for our theme “&lt;strong&gt;How do we get better at Speed and Ease of Release?”&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The magic of Open Space did not disappoint again this time!! The moment an invitation to propose the topics was announced, people jumped from their seats and ran to grab the paper and markers. It was almost like they were finally given the stage and opportunity to talk about their passion!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/Xf5WzSFl.jpg?1&quot; alt=&quot;OST&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We only used four rooms and short twenty minutes time slots. And yet, in less than 3 hours we were able to uncover a ton of ideas, build connections and form “task forces” to continue beyond the Open Space. The equalizing power of a circle, freedom of choice where to participate, five principles and the law of mobility created a space for new ideas to develop and passion to emerge&lt;/p&gt;

&lt;p&gt;If you haven’t tried an Open Space before, I would encourage you to learn more about it, look for an opportunity to experience it at a conference as well as &lt;a href=&quot;https://www.linkedin.com/in/danapylayeva/&quot;&gt;reach out to me&lt;/a&gt; or other Open Space facilitators with questions. It can really make a difference in your organization!&lt;/p&gt;

&lt;h3 id=&quot;leadership-kanban-board&quot;&gt;Leadership Kanban board&lt;/h3&gt;

&lt;p&gt;This Open Space brought together people from all levels of our engineering organization. As action items started to develop post-Open Space a number of them ended up on “leadership plate”. To be more precise, on the leadership Kanban board. This was actually pretty cool to experience this level of visibility and observe the real time progress.&lt;/p&gt;

&lt;h2 id=&quot;iterating-to-make-it-our-own&quot;&gt;Iterating to make it our own&lt;/h2&gt;

&lt;p&gt;Six month later, we were getting ready for the next round of checks. We wanted to get insights into some of the new issues that were on the top of everyone’s mind at that moment.&lt;/p&gt;

&lt;h3 id=&quot;path-to-mastery&quot;&gt;Path to Mastery&lt;/h3&gt;

&lt;p&gt;At that time, organization was in the middle of &lt;a href=&quot;https://tech.hbc.com/2018-01-24-career-structure.html&quot;&gt;re-defining career structure&lt;/a&gt; . With the addition of this new category we were hoping to address the following questions:&lt;/p&gt;

&lt;p&gt;How effective are we in creating an environment for our team members to experiment with different roles? Are we enabling &lt;a href=&quot;http://www.innolution.com/resources/glossary/t-shaped-skills&quot;&gt;T-shaped skills&lt;/a&gt; development or boxing team members into narrow roles? Or in the healthcheck terms:&lt;/p&gt;

&lt;p&gt;Awesome/Deadly:&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;img src=&quot;https://i.imgur.com/rHaQ9RAm.png&quot; alt=&quot;Awesome/Deadly&quot; /&gt;&lt;/td&gt;
      &lt;td&gt;“I feel supported and encouraged to experiment with different roles. My options are open and clear.”&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Crappy/Banjaxed:&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;img src=&quot;https://i.imgur.com/6N6204Jm.png&quot; alt=&quot;Crappy/Banjaxed&quot; /&gt;&lt;/td&gt;
      &lt;td&gt;“I feel like I’m stuck in a narrow role, my career options are limited or unclear.”&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;psychological-safety&quot;&gt;Psychological Safety&lt;/h3&gt;

&lt;p&gt;Most of you have heard of &lt;a href=&quot;https://www.nytimes.com/2016/02/28/magazine/what-google-learned-from-its-quest-to-build-the-perfect-team.html&quot;&gt;Google’s Project Aristotle&lt;/a&gt; by now. At HBC we wanted to get some insights, have &lt;em&gt;WE&lt;/em&gt; got what it takes? How are our teams doing on Psychological Safety? Is this the area we need to pay attention to? Or in the healthcheck terms:&lt;/p&gt;

&lt;p&gt;Awesome/Deadly:&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;img src=&quot;https://i.imgur.com/mkvOUiqm.png&quot; alt=&quot;Awesome/Deadly&quot; /&gt;&lt;/td&gt;
      &lt;td&gt;“In my team I can take risk, be myself and speak my mind without fear of negative consequences to my image, status or career.”&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Crappy/Banjaxed:&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;img src=&quot;https://i.imgur.com/2YzGJolm.png&quot; alt=&quot;Crappy/Banjaxed&quot; /&gt;&lt;/td&gt;
      &lt;td&gt;“I avoid voicing my opinion when it differs from what the team thinks. It is safer to “go with the flow” in my team.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;side-effects-from-the-new-health-checks&quot;&gt;Side effects from the new health checks&lt;/h2&gt;

&lt;p&gt;As we’ve taken the teams through the new round, we’ve noticed many more “Aha! Moments” in team discussions. 
Having clear definition for what we consider “Awesome/Deadly” vs. “Crappy/Banjaxed” helped the team members see opportunities in modifying their own actions. Just calling out “Psychological Safety” as one of the categories, helped teams realize the value it has and enabled deeper conversations.&lt;/p&gt;

&lt;p&gt;“Path to Mastery” discussion inspired the teams to consider more pairing, organize learning sessions and engage in other intentional T-shaping activities.&lt;/p&gt;

&lt;p&gt;Fun fact - a number of the teams realized that they’ve forgotten about the team outings and agreed to schedule one in the immediate future. If nothing else, we’ve made a positive contribution to local economy!&lt;/p&gt;

&lt;h2 id=&quot;parting-words&quot;&gt;Parting words&lt;/h2&gt;

&lt;p&gt;I am glad you made it this far! Thank you for reading, it’s been a long one. 
Hope learning about our experience got you at least curious. As I leave you ready to experiment with &lt;em&gt;YOUR&lt;/em&gt; health checks, I’d love you to remember these four points:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Don’t overthink it. Pick a tool and give it a try.&lt;/li&gt;
  &lt;li&gt;Get the feedback and make the tool relevant.&lt;/li&gt;
  &lt;li&gt;Expand your focus and find new areas for improvement.&lt;/li&gt;
  &lt;li&gt;Don’t forget to have fun - teams that play together, stay together!&lt;/li&gt;
&lt;/ol&gt;</content><author><name>Dana Pylayeva</name></author><category term="Healthcheck" /><category term="Agile" /><category term="Teams" /><summary type="html">Over a year ago we began to experiment with new ways of helping our teams in finding their next improvement opportunities. We started with an assumption that while every team is unique, there must be a way to approach a “team health” conversation in a similar fashion across them all. By using a standardized assessment we also expected to find some areas in which organizational improvements would be beneficial. In our quest for a suitable tool, we borrowed, fine-tuned and iterated to finally arrive at the health checks that fit our needs. This blog post is a reflection on the evolution of team health checks in HBC.</summary></entry></feed>