<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="http://jekyllrb.com" version="3.8.4">Jekyll</generator><link href="https://tech.hbc.com/feed.xml" rel="self" type="application/atom+xml" /><link href="https://tech.hbc.com/" rel="alternate" type="text/html" /><updated>2018-10-04T20:41:12-05:00</updated><id>https://tech.hbc.com/</id><title>HBC Tech</title><subtitle>We power the website and mobile experiences for Saks,  Saks Off Fifth, Gilt, Lord &amp; Taylor and The Bay.
</subtitle><entry><title>Microservices at HBC</title><link href="https://tech.hbc.com/2018-10-04-microservices-at-hbc.html" rel="alternate" type="text/html" title="Microservices at HBC" /><published>2018-10-04T00:00:00-05:00</published><updated>2018-10-04T00:00:00-05:00</updated><id>https://tech.hbc.com/microservices-at-hbc</id><content type="html" xml:base="https://tech.hbc.com/2018-10-04-microservices-at-hbc.html">&lt;p&gt;HBC’s commerce platform is constantly evolving to support new business requirements. Our platform’s microservice architecture enables engineering teams to rapidly build and deploy new features.&lt;/p&gt;

&lt;p&gt;In September, HBC engineers Fabrizio Fortino and Sean Sullivan gave presentations about the past, present, and future of microservices at the Hudson’s Bay Company.&lt;/p&gt;

&lt;h2 id=&quot;event-driven-microservices&quot;&gt;Event Driven Microservices&lt;/h2&gt;
&lt;p&gt;Dublin Microservices User Group&lt;br /&gt;
September 27, 2018&lt;br /&gt;
Fabrizio Fortino (&lt;a href=&quot;https://twitter.com/fabriziofortino&quot;&gt;@fabriziofortino&lt;/a&gt;)&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.slideshare.net/FabrizioFortino1/event-driven-microservices&quot;&gt;&lt;img src=&quot;./assets/images/microservices-at-hbc-2018/event-driven-microservices-hbc-dublin-2018-09-27.png&quot; alt=&quot;microservices-dublin-image&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;microservices-at-hbc&quot;&gt;Microservices at HBC&lt;/h2&gt;
&lt;p&gt;Portland Java User Group&lt;br /&gt;
September 25, 2018&lt;br /&gt;
Sean Sullivan (&lt;a href=&quot;https://twitter.com/tinyrobots&quot;&gt;@tinyrobots&lt;/a&gt;)&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://speakerdeck.com/sullis/microservices-portland-oregon-2018-09-25&quot;&gt;&lt;img src=&quot;./assets/images/microservices-at-hbc-2018/microservices-at-hbc-portland-2018-09-25-with-border.png&quot; alt=&quot;microservices-portland-image&quot; /&gt;&lt;/a&gt;&lt;/p&gt;</content><author><name>Sean Sullivan</name></author><category term="aws" /><category term="scala" /><category term="java" /><category term="kafka" /><category term="cloud" /><category term="microservices" /><category term="2018" /><summary>HBC’s commerce platform is constantly evolving to support new business requirements. Our platform’s microservice architecture enables engineering teams to rapidly build and deploy new features.</summary></entry><entry><title>Email: from macro-service to micro-service</title><link href="https://tech.hbc.com/2018-09-24-email-from-macro-service-to-micro-service.html" rel="alternate" type="text/html" title="Email: from macro-service to micro-service" /><published>2018-09-24T00:00:00-05:00</published><updated>2018-09-24T00:00:00-05:00</updated><id>https://tech.hbc.com/email-from-macro-service-to-micro-service</id><content type="html" xml:base="https://tech.hbc.com/2018-09-24-email-from-macro-service-to-micro-service.html">&lt;p&gt;Email Engineering recently migrated all transactional emails to CNS v2. This was a slow migration as CNS v1, although, referred to as a micro service was anything but one! We inherited CNS v1 towards the end of last year and started migration to CNS v2 in the beginning of this year. In doing so, we followed what could be labeled as a flavor of &lt;a href=&quot;https://docs.microsoft.com/en-us/azure/architecture/patterns/strangler&quot;&gt;Strangler pattern&lt;/a&gt;. In this blog, I will share how we accomplished this task and also provide a detailed view of the new CNS (CNS v2).&lt;/p&gt;

&lt;h1 id=&quot;cns&quot;&gt;CNS&lt;/h1&gt;
&lt;p&gt;HBC Customer Notification Service (CNS) processes and sends transactional emails for Saks, Saks Off 5th and Lord and Taylor banners. CNS consumes events from Order Management System (OMS), renders the event payload into emails and sends them via CheetahMail. CNS also sends SMS notifications via Vibes SMS for applicable events and users. With CNS v2 and consequently the breakdown of v1 monolith into true micro services, the acronym CNS now stands for Customer Notification “System”.&lt;/p&gt;

&lt;h1 id=&quot;cns-v2&quot;&gt;CNS v2&lt;/h1&gt;
&lt;p&gt;CNS v2 is developed for the Cloud and is 100% hosted on AWS. It breaks down the v1 monolith into three micro services, namely- &lt;code class=&quot;highlighter-rouge&quot;&gt;svc-mq-consumer&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;api-customer-notification&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;lib-email-render&lt;/code&gt;. The v2 architecture and the three new components are explained below.&lt;/p&gt;

&lt;h2 id=&quot;architecture&quot;&gt;Architecture&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;./assets/images/cns-v2/cns-v2-arch-diagram.png&quot; alt=&quot;alt text&quot; /&gt;&lt;/p&gt;
&lt;h3 id=&quot;svc-mq-consumer&quot;&gt;Svc-mq-consumer&lt;/h3&gt;
&lt;p&gt;This component is an IBM MQ message handler/consumer. After polling for messages from the queue, it &lt;code class=&quot;highlighter-rouge&quot;&gt;POSTs&lt;/code&gt; the message payload to the api-customer-notification’s &lt;code class=&quot;highlighter-rouge&quot;&gt;/send_email&lt;/code&gt; endpoint.&lt;/p&gt;

&lt;h3 id=&quot;api-customer-notification&quot;&gt;Api-customer-notification&lt;/h3&gt;
&lt;p&gt;This component, written as a Lambda function, exposes the CNS API. After receiving a &lt;code class=&quot;highlighter-rouge&quot;&gt;/send_email&lt;/code&gt; request from the consumer, the api invokes the &lt;code class=&quot;highlighter-rouge&quot;&gt;lib-email-render&lt;/code&gt; Lambda function for rendering it into HTML. On receiving the HTML response, the api’s thin Email Gateway wrapper sends the HTML payload with relevant data to CheetahMail. The api stores both the message payload received from the consumer and the final rendered email HTML in Aurora MySql DB. It also exposes this data as a powerful dashboard for troubleshooting and QA testing. As the dashboard is exposed to all HBC and is used by multiple teams, it is gaining popularity and traffic and now merits to exist on its own as a &lt;code class=&quot;highlighter-rouge&quot;&gt;web&lt;/code&gt; component in the coming days.&lt;/p&gt;

&lt;h3 id=&quot;lib-email-render&quot;&gt;Lib-email-render&lt;/h3&gt;
&lt;p&gt;The lib Lambda function holds all the business logic needed to render an email HTML from an event message. Most of the business logic from CNS v1 is migrated to this component.&lt;/p&gt;

&lt;h1 id=&quot;strangling-cns-v1&quot;&gt;Strangling CNS v1&lt;/h1&gt;
&lt;h2 id=&quot;phase-1---using-cns-v1-as-message-consumer-and-repeater&quot;&gt;Phase 1 - Using CNS v1 As Message Consumer and Repeater&lt;/h2&gt;
&lt;p&gt;Once CNS v2 started taking shape, the team discussed steps to phase out CNS v1. First, we decided that this should be a banner by banner transition. This would help in streamlining the team’s efforts and also prevent business impact across banners if something were to break. Next, we agreed on using CNS v1 as simply a message consumer, which would receive the message off the IBM MQ queue and send the payload to CNS v2’s &lt;code class=&quot;highlighter-rouge&quot;&gt;api-customer-notification&lt;/code&gt; component. This meant that our two core components (api and lib) were in play and the team could focus its efforts on developing and testing those.&lt;/p&gt;

&lt;p&gt;We launched both Saks and Lord and Taylor on CNS v2 in Production with this setup on Apr 5.&lt;/p&gt;

&lt;h2 id=&quot;phase-2---using-svc-mq-consumer-as-message-consumer-for-o5&quot;&gt;Phase 2 - Using &lt;code class=&quot;highlighter-rouge&quot;&gt;svc-mq-consumer&lt;/code&gt; As Message Consumer for O5&lt;/h2&gt;
&lt;p&gt;Once Saks and Lord and Taylor were on CNS v2 (using CNS v1 as message consumer), we focused our attention to migrate Saks Off 5th to CNS v2.
By now, the two new CNS v2 components (api and lib) were stable in Production (for Saks and Lord and Taylor). We took some time to enhance CloudWatch logging and metrics for both these new components. We also enhanced the api dashboard in this time to facilitate troubleshooting and added features such as email preview and resend.&lt;/p&gt;

&lt;p&gt;At this time, the team felt confident to undertake a full migration for Saks Off 5th, including replacing CNS v1 with our brand new &lt;code class=&quot;highlighter-rouge&quot;&gt;svc-mq-consumer&lt;/code&gt; component. Since CNS v1 was not used in this flow, we had to shut down CNS v1 completely for Saks Off 5th. This was essential as the underlying infrastructure- the queues, OMS - were common to both CNS v1 and v2 and having v1 linger around could lead to unexpected results.&lt;/p&gt;

&lt;p&gt;O5 migrated completely on CNS v2 in Production on Aug 14.&lt;/p&gt;

&lt;h2 id=&quot;phase-3---shutting-down-cns-v1-and-clean-up&quot;&gt;Phase 3 - Shutting Down CNS v1 and Clean up&lt;/h2&gt;
&lt;p&gt;By now, all three CNS v2 components were taking live Production traffic.The team took some time to put CW logging and metrics in the consumer component. Finally, we decided it was time to shut down CNS v1 for good. Time to draw the curtains, roll the credits! It was great knowing you, CNS v1!&lt;/p&gt;

&lt;p&gt;Three teams- Engineering, QA and Infra, joined forces to co-ordinate this effort. It was crucial that old CNS v1 Docker instances were removed, new CNS v2 components were enabled and their connectivity with queues etc. were established and verified. Also, the end to end flow from order placement on website to receiving emails was to be verified. The Go pipelines that were used to build and deploy code for CNS v1 were to be paused and subsequently disabled (so that no one is able to resurrect CNS v1 even by mistake). Finally, the &lt;code class=&quot;highlighter-rouge&quot;&gt;nagios&lt;/code&gt; alerts for CNS v1 were disabled and its Mongo DB servers decommissioned.&lt;/p&gt;

&lt;p&gt;CNS v1 was shut down for all banners on Sep 6.&lt;/p&gt;

&lt;h1 id=&quot;cns-v2-ci-and-cd&quot;&gt;CNS v2 CI and CD&lt;/h1&gt;
&lt;p&gt;CNS v2 follows Continuous Integration (CI) and is set up for Continuous Delivery (CD), but the latter is currently disabled. Two pieces need to be in place for us to push code to Production with a high degree of confidence- A reliable infrastructure, with high availability and scalability, and a development workflow with adequate checks and measures that guarantees only high quality, bug free code reaches Production. While hosting all of CNS v2 in AWS takes care of the robust infrastructure piece, it is the development workflow that the team is working to continuously improve.&lt;/p&gt;

&lt;p&gt;When we inherited CNS v1, the unit tests’ code coverage was barely 40%. Today, CNS v2 has close to 75% code coverage (and is increasing every day). The CloudWatch (CW) alerts are set up by banner and by email type and are integrated with PagerDuty. We are in the process of improving our metrics in CW so that if incidents happen, we are able to quantify their impact with precision. We are also integrating our Lambda deployments with New Relic so as to provide greater visibility to SRE and Ops teams. CW Logging is already in place for all components. We feel that we are almost there and should be able to enable CD in the next couple of weeks.&lt;/p&gt;

&lt;h1 id=&quot;final-thoughts&quot;&gt;Final Thoughts&lt;/h1&gt;
&lt;p&gt;While we are forever in debt of the old CNS, the new CNS opens up a world of possibilities. All transactional emails across all banners are getting a fresh, modern look as I write this, made possible with new found powers of CNS v2. Bay emails migration to CNS follows soon. Business (Marketing) loves the new CNS and they feel emboldened to try out new features and products in the coming days and months. The team has a spring in its stride and has so much to look forward to. Happy days lie ahead filled with all good things!&lt;/p&gt;</content><author><name>Kinshuk Varshney</name></author><category term="cns" /><category term="aws" /><category term="lambda" /><category term="email" /><category term="architecture" /><category term="scala" /><category term="microservices" /><summary>Email Engineering recently migrated all transactional emails to CNS v2. This was a slow migration as CNS v1, although, referred to as a micro service was anything but one! We inherited CNS v1 towards the end of last year and started migration to CNS v2 in the beginning of this year. In doing so, we followed what could be labeled as a flavor of Strangler pattern. In this blog, I will share how we accomplished this task and also provide a detailed view of the new CNS (CNS v2).</summary></entry><entry><title>Would You Rather be Awesome or Deadly?</title><link href="https://tech.hbc.com/2018-07-30-hbc-health-checks.html" rel="alternate" type="text/html" title="Would You Rather be Awesome or Deadly?" /><published>2018-07-30T00:00:00-05:00</published><updated>2018-07-30T00:00:00-05:00</updated><id>https://tech.hbc.com/hbc-health-checks</id><content type="html" xml:base="https://tech.hbc.com/2018-07-30-hbc-health-checks.html">&lt;p&gt;Over a year ago we began to experiment with new ways of helping our teams in finding their next improvement opportunities. We started with an assumption that while every team is unique, there must be a way to approach a “team health” conversation in a similar fashion across them all. By using a standardized assessment we also expected to find some areas in which organizational improvements would be beneficial. In our quest for a suitable tool, we borrowed, fine-tuned and iterated to finally arrive at the health checks that fit our needs. This blog post is a reflection on the evolution of team health checks in HBC.&lt;/p&gt;

&lt;h2 id=&quot;searching-for-the-right-tool&quot;&gt;Searching for the right tool&lt;/h2&gt;
&lt;p&gt;Basic Google search came back with a number of options for measuring team effectiveness. Eliminating paid options and the options described in a very dry corporate language, we ended up looking at the good old &lt;a href=&quot;https://labs.spotify.com/2014/09/16/squad-health-check-model/&quot;&gt;Spotify Squad Health Check&lt;/a&gt; described by Henrik Kniberg and the &lt;a href=&quot;http://yuvalyeret.com/using-the-spotify-squad-health-check-beyond-the-squad/&quot;&gt;gamified Kahoot! version&lt;/a&gt; of it shared by Yuval Yeret. While both authors described the use of these assessments for co-located teams, the Kahoot! version had all the potential to be a good fit for distributed teams as well.&lt;/p&gt;

&lt;p&gt;It’s worth noting that while the majority of our teams are co-located, it is not unusual for any of them to have a team member who one day would need to work from home, from a hotel room in a different country or even from a boat!&lt;/p&gt;

&lt;p&gt;Naturally, our tools have to be flexible enough and work equally well for people “in the room” and for their “accidentally-virtual” colleagues.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/iHzUVEHl.png&quot; alt=&quot;Kahoot&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;While by itself Kahoot! doesn’t generate any visual graphs, with a bit of conditional formatting and macros one can easily turn the raw data extracted into something more visually engaging.&lt;/p&gt;

&lt;p&gt;The first round of Kahoot! Health Checks was kicked off with 8 teams in September 2016. Based on their feedback, the following four qualities of this approach stood out the most:&lt;/p&gt;

&lt;h3 id=&quot;fast&quot;&gt;Fast&lt;/h3&gt;

&lt;p&gt;Nobody likes meetings. Luckily, using Kahoot! we could shorten the time needed to run health checks to 15 min, including the time to generate a chart. Followed by a focused 15 min mini-retrospective with the participants, in only half an hour we were able to discover and zoom into the biggest problem areas of a team.&lt;/p&gt;

&lt;h3 id=&quot;anonymous&quot;&gt;Anonymous&lt;/h3&gt;

&lt;p&gt;One may argue that team members should feel psychologically safe and be open enough to take this survey using their real names. When running this health check, we observed a mix of safety levels. In some teams, the real names were used; for others the ability to use “nicknames” really enabled the openness of their responses. For many team members, though, this feature provided an extra opportunity to have fun and show off their creativity in coming up with funny nicknames.&lt;/p&gt;

&lt;h3 id=&quot;fun&quot;&gt;Fun&lt;/h3&gt;

&lt;p&gt;Gamified format, engaging music, bright colors and fun pictures - these are just a few elements that make this survey fun. Unlike some of the traditional surveys that are taken by each team member in isolation, this one brings the entire team together for a shared experience and laughter. Bonus feature - this shared experience increases the feeling of psychological safety, preparing the team for deep conversations over survey results.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/BSIoBTNl.png&quot; alt=&quot;Fun&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;accurate&quot;&gt;Accurate&lt;/h3&gt;

&lt;p&gt;In spite of a relatively simplistic, fast and humorous approach, the results of the surveys turned out to be pretty accurate, highlighting the areas of improvements and the areas that the teams felt good about.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/F3tJqRzl.png&quot; alt=&quot;Accurate&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;fine-tuning-for-the-cultural-fit&quot;&gt;Fine-tuning for the cultural fit&lt;/h2&gt;

&lt;p&gt;To our biggest surprise, as much as the teams in US supported our first experiment with the health checks, the teams in Ireland cringed at it. As it turned out, the language of the response options (“Awesome”, “Crappy” or “Meh”) which we copied from the original Spotify squad check, didn’t really resonate with them. It was the time for us to customize the health check for a cultural fit and learn some &lt;a href=&quot;https://theculturetrip.com/europe/ireland/articles/irish-slang-terms-you-need-to-know/&quot;&gt;Irish slang&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;We polled our Dublin team members to find the Irish equivalents of the response options we needed. This was when I discovered that “&lt;strong&gt;Grand&lt;/strong&gt;” is just &lt;em&gt;“OK&lt;/em&gt; or &lt;em&gt;Meh”&lt;/em&gt; in Dublin;&lt;/p&gt;

&lt;p&gt;“&lt;strong&gt;Deadly&lt;/strong&gt;” is actually pretty &lt;em&gt;Good&lt;/em&gt;, even &lt;em&gt;Excellent&lt;/em&gt;; whereas “&lt;strong&gt;Banjaxed&lt;/strong&gt;” is “&lt;em&gt;Broken, beyond repair&lt;/em&gt;”.&lt;/p&gt;

&lt;p&gt;With this fine-tuning we also replaced “Players vs. Pawns” category with “Autonomy”, which in our opinion better reflects the intent of this statement:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&quot;We are in control of our own destiny. 
 We decide what to build and how to build it for the best impact.&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The next version of the health checks was taken by 21 teams from Dublin and New York and completed by October 2017.  For the first time in the HBC Tech history a comprehensive view into the health of our teams across the org was created and provided the insights into some of the systemic issues in organization.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/pN4tawUl.png?2&quot; alt=&quot;Total&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;improving-the-teams-and-the-organization&quot;&gt;Improving the teams and the organization&lt;/h2&gt;

&lt;p&gt;Making things visible was just a first step on our bumpy road towards improvement. Next we ran team-level retrospectives, shared the summary view with the entire tech team and facilitated an &lt;a href=&quot;http://www.openspaceworld.com/users_guide.htm&quot;&gt;Open Space event&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;open-space&quot;&gt;Open Space&lt;/h3&gt;

&lt;p&gt;As I was walking the circle, introducing the group to Open Space, I was a bit nervous. This was another big experiment for HBC. How will the group take it? What if there would be an awkward silence and nothing would get proposed as topics for our theme “&lt;strong&gt;How do we get better at Speed and Ease of Release?”&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The magic of Open Space did not disappoint again this time!! The moment an invitation to propose the topics was announced, people jumped from their seats and ran to grab the paper and markers. It was almost like they were finally given the stage and opportunity to talk about their passion!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/Xf5WzSFl.jpg?1&quot; alt=&quot;OST&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We only used four rooms and short twenty minutes time slots. And yet, in less than 3 hours we were able to uncover a ton of ideas, build connections and form “task forces” to continue beyond the Open Space. The equalizing power of a circle, freedom of choice where to participate, five principles and the law of mobility created a space for new ideas to develop and passion to emerge&lt;/p&gt;

&lt;p&gt;If you haven’t tried an Open Space before, I would encourage you to learn more about it, look for an opportunity to experience it at a conference as well as &lt;a href=&quot;https://www.linkedin.com/in/danapylayeva/&quot;&gt;reach out to me&lt;/a&gt; or other Open Space facilitators with questions. It can really make a difference in your organization!&lt;/p&gt;

&lt;h3 id=&quot;leadership-kanban-board&quot;&gt;Leadership Kanban board&lt;/h3&gt;

&lt;p&gt;This Open Space brought together people from all levels of our engineering organization. As action items started to develop post-Open Space a number of them ended up on “leadership plate”. To be more precise, on the leadership Kanban board. This was actually pretty cool to experience this level of visibility and observe the real time progress.&lt;/p&gt;

&lt;h2 id=&quot;iterating-to-make-it-our-own&quot;&gt;Iterating to make it our own&lt;/h2&gt;

&lt;p&gt;Six month later, we were getting ready for the next round of checks. We wanted to get insights into some of the new issues that were on the top of everyone’s mind at that moment.&lt;/p&gt;

&lt;h3 id=&quot;path-to-mastery&quot;&gt;Path to Mastery&lt;/h3&gt;

&lt;p&gt;At that time, organization was in the middle of &lt;a href=&quot;https://tech.hbc.com/2018-01-24-career-structure.html&quot;&gt;re-defining career structure&lt;/a&gt; . With the addition of this new category we were hoping to address the following questions:&lt;/p&gt;

&lt;p&gt;How effective are we in creating an environment for our team members to experiment with different roles? Are we enabling &lt;a href=&quot;http://www.innolution.com/resources/glossary/t-shaped-skills&quot;&gt;T-shaped skills&lt;/a&gt; development or boxing team members into narrow roles? Or in the healthcheck terms:&lt;/p&gt;

&lt;p&gt;Awesome/Deadly:&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;img src=&quot;https://i.imgur.com/rHaQ9RAm.png&quot; alt=&quot;Awesome/Deadly&quot; /&gt;&lt;/td&gt;
      &lt;td&gt;“I feel supported and encouraged to experiment with different roles. My options are open and clear.”&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Crappy/Banjaxed:&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;img src=&quot;https://i.imgur.com/6N6204Jm.png&quot; alt=&quot;Crappy/Banjaxed&quot; /&gt;&lt;/td&gt;
      &lt;td&gt;“I feel like I’m stuck in a narrow role, my career options are limited or unclear.”&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;psychological-safety&quot;&gt;Psychological Safety&lt;/h3&gt;

&lt;p&gt;Most of you have heard of &lt;a href=&quot;https://www.nytimes.com/2016/02/28/magazine/what-google-learned-from-its-quest-to-build-the-perfect-team.html&quot;&gt;Google’s Project Aristotle&lt;/a&gt; by now. At HBC we wanted to get some insights, have &lt;em&gt;WE&lt;/em&gt; got what it takes? How are our teams doing on Psychological Safety? Is this the area we need to pay attention to? Or in the healthcheck terms:&lt;/p&gt;

&lt;p&gt;Awesome/Deadly:&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;img src=&quot;https://i.imgur.com/mkvOUiqm.png&quot; alt=&quot;Awesome/Deadly&quot; /&gt;&lt;/td&gt;
      &lt;td&gt;“In my team I can take risk, be myself and speak my mind without fear of negative consequences to my image, status or career.”&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Crappy/Banjaxed:&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;img src=&quot;https://i.imgur.com/2YzGJolm.png&quot; alt=&quot;Crappy/Banjaxed&quot; /&gt;&lt;/td&gt;
      &lt;td&gt;“I avoid voicing my opinion when it differs from what the team thinks. It is safer to “go with the flow” in my team.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;side-effects-from-the-new-health-checks&quot;&gt;Side effects from the new health checks&lt;/h2&gt;

&lt;p&gt;As we’ve taken the teams through the new round, we’ve noticed many more “Aha! Moments” in team discussions. 
Having clear definition for what we consider “Awesome/Deadly” vs. “Crappy/Banjaxed” helped the team members see opportunities in modifying their own actions. Just calling out “Psychological Safety” as one of the categories, helped teams realize the value it has and enabled deeper conversations.&lt;/p&gt;

&lt;p&gt;“Path to Mastery” discussion inspired the teams to consider more pairing, organize learning sessions and engage in other intentional T-shaping activities.&lt;/p&gt;

&lt;p&gt;Fun fact - a number of the teams realized that they’ve forgotten about the team outings and agreed to schedule one in the immediate future. If nothing else, we’ve made a positive contribution to local economy!&lt;/p&gt;

&lt;h2 id=&quot;parting-words&quot;&gt;Parting words&lt;/h2&gt;

&lt;p&gt;I am glad you made it this far! Thank you for reading, it’s been a long one. 
Hope learning about our experience got you at least curious. As I leave you ready to experiment with &lt;em&gt;YOUR&lt;/em&gt; health checks, I’d love you to remember these four points:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Don’t overthink it. Pick a tool and give it a try.&lt;/li&gt;
  &lt;li&gt;Get the feedback and make the tool relevant.&lt;/li&gt;
  &lt;li&gt;Expand your focus and find new areas for improvement.&lt;/li&gt;
  &lt;li&gt;Don’t forget to have fun - teams that play together, stay together!&lt;/li&gt;
&lt;/ol&gt;</content><author><name>Dana Pylayeva</name></author><category term="Healthcheck" /><category term="Agile" /><category term="Teams" /><summary>Over a year ago we began to experiment with new ways of helping our teams in finding their next improvement opportunities. We started with an assumption that while every team is unique, there must be a way to approach a “team health” conversation in a similar fashion across them all. By using a standardized assessment we also expected to find some areas in which organizational improvements would be beneficial. In our quest for a suitable tool, we borrowed, fine-tuned and iterated to finally arrive at the health checks that fit our needs. This blog post is a reflection on the evolution of team health checks in HBC.</summary></entry><entry><title>Building A Better Keyboard Navigation</title><link href="https://tech.hbc.com/2018-05-30-ada-accessibility-and-keyboard-navigation.html" rel="alternate" type="text/html" title="Building A Better Keyboard Navigation" /><published>2018-05-30T00:00:00-05:00</published><updated>2018-05-30T00:00:00-05:00</updated><id>https://tech.hbc.com/ada-accessibility-and-keyboard-navigation</id><content type="html" xml:base="https://tech.hbc.com/2018-05-30-ada-accessibility-and-keyboard-navigation.html">&lt;p&gt;The simplest way to understand the importance of web accessibility is to open a web browser, put on a blindfold, and try navigating a website. Despite a small percentage of users with disabilities, their human right to navigate the internet still stands. In this post I’ll share some of my learnings from making our navigation more accessible.&lt;/p&gt;

&lt;h2 id=&quot;w3c-recommendations-for-accessibility&quot;&gt;W3C Recommendations for Accessibility&lt;/h2&gt;
&lt;p&gt;Not familiar with this type of work, I referred to &lt;a href=&quot;https://www.w3.org/TR/wai-aria-practices-1.1/#menu&quot;&gt;WAI-ARIA Authoring Practices&lt;/a&gt;, and found the following recommendations helpful. &lt;em&gt;Just in case, WAI stans for “Web Accessibility Initiative”, and ARIA stands for “Accessible Rich Internet Application”.&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Leverage WAI-ARIA Roles, States, and Properties&lt;/li&gt;
  &lt;li&gt;Manage Focus Inside Composite Elements&lt;/li&gt;
  &lt;li&gt;All Components Need To Be Reachable Via The Keyboard&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;1-leverage-roles-states--properties&quot;&gt;1. Leverage Roles, States, &amp;amp; Properties&lt;/h3&gt;
&lt;p&gt;Landmark roles are defined by many of the &lt;a href=&quot;https://www.w3.org/TR/2017/NOTE-wai-aria-practices-1.1-20171214/examples/landmarks/HTML5.html&quot;&gt;HTML5 elements&lt;/a&gt;. For example, the &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;nav&amp;gt;&lt;/code&gt; element gets the aria role &lt;code class=&quot;highlighter-rouge&quot;&gt;navigation&lt;/code&gt;, by default. These default roles aid assistive technologies used to browse web pages, but to make our markup more accessible, we need to also utilize aria states.&lt;/p&gt;

&lt;p&gt;Aria states like &lt;code class=&quot;highlighter-rouge&quot;&gt;aria-haspopup&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;aria-expanded&lt;/code&gt; are what every screen reader dreams of. Using &lt;code class=&quot;highlighter-rouge&quot;&gt;aria-haspopup&lt;/code&gt; lets screen readers know there’s a submenu available. The &lt;code class=&quot;highlighter-rouge&quot;&gt;aria-expanded&lt;/code&gt; attribute will indicate to a screen reader that a menu is expanded or callapsed, it’s also great for applying UI changes with CSS, ie; opening and closing flyout menus that are being interacted with.&lt;/p&gt;

&lt;div class=&quot;language-scss highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;.nav_link&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;aria-expanded&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;:hover&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;nl&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;When testing with screen readers, there were some less than useful audio feedback around the number of items in a popup menu. The screen reader didn’t make it completely clear how many items were being displayed in a submenu. This was caused by various levels of nested &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;ul&amp;gt;&lt;/code&gt; elements. Stuck with our existing HTML markup for now, changing the role of each anchor element from &lt;code class=&quot;highlighter-rouge&quot;&gt;link&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;menuitem&lt;/code&gt; produced more relevant audio feedback. I raised the idea of ditching the traditional navigation &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;ul&amp;gt;&lt;/code&gt; markup in favor of a &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;span&amp;gt;&lt;/code&gt; containing a bunch of &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;a&amp;gt;&lt;/code&gt; elements. Given everything has the correct aria attributes, I didn’t forsee any issues, but it seems the internet still favors &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;ul&amp;gt;&lt;/code&gt; for nav structures.&lt;/p&gt;

&lt;h3 id=&quot;2-manage-the-focus-ring-own-it-dont-hide-it&quot;&gt;2. Manage the Focus Ring. (own it, don’t hide it)&lt;/h3&gt;
&lt;p&gt;Not every element on a page needs to be in the “tab order”, but all interactive elements should be focusable through scripting. It’s obviously not a good idea to manually set the ‘tab-index’ property, but setting it to ‘-1’ allows us to focus that element with javascript. Regardless if it’s a focusable elemement by default. Changing &lt;code class=&quot;highlighter-rouge&quot;&gt;tab-index&lt;/code&gt; from -1 to 0, or using the “Roving Tab Index”, is a great way to manage the focus ring and tab sequence. This also helps isolate parts of a form or a page into focusable groups, minimizing the number of tab stops to navigate. The other way is using the &lt;code class=&quot;highlighter-rouge&quot;&gt;aria-activedescendant&lt;/code&gt;, but the benefit of &lt;code class=&quot;highlighter-rouge&quot;&gt;tab-index&lt;/code&gt; is the user agent will scroll to bring the element into view if it’s not.&lt;/p&gt;

&lt;p&gt;WAI-ARIA Authoring Practices recommends the tab sequence should include only one focusable element of a composite UI component. Or, the element that is to be included in the tab sequence has tabindex of “0” and all other focusable elements contained in the composite component have tabindex of “-1”. For example, a nav item in a menu bar. Once a composite component contains focus, the menu bar in this case, pressing the enter key will shift focus to the first element inside of it and keys other than Tab and Shift + Tab will move focus among its focusable elements. See the section on “expected keyboard navigation” below.&lt;/p&gt;

&lt;p&gt;The important thing to highlight here, is that this technique removes unneccesary elements from the natural tab sequence, simplifying the user experience for keyboard users by not focusing every single element while tabing through a page. Instead, users can tab from component to component, choosing to dive deeper or move on. This creates a more efficient navigation and limits the number of key presses required to get to a specific part of the page. If a user is using a mouth stick to type, this is extemely helpful.&lt;/p&gt;

&lt;p&gt;You can learn more about this technique in &lt;a href=&quot;https://www.w3.org/TR/wai-aria-practices-1.1/#kbd_general_between&quot;&gt;5.5 Keyboard Navigation Between Components (The Tab Sequence)&lt;/a&gt;
and &lt;a href=&quot;https://www.w3.org/TR/wai-aria-practices-1.1/#kbd_general_within&quot;&gt;5.6 Keyboard Navigation Inside Components&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;3-create-expected-keyboard-navigation&quot;&gt;3. Create Expected Keyboard Navigation&lt;/h3&gt;
&lt;p&gt;When the user decides to dive deeper into a composite component, there are some standard key strokes and expected functionality. Some of these may not be familiar to mouse users, but are to users relying on the keyboard. W3C specifies the following keys and actions when developing a keyboard interface. A few have optional recommendations, but specify that it’s up to the author to decide. Bottom line here is to maintain a consistent functionality across your application and its composite components. Also, making sure to move the focus ring in an expected direction or location.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Key&lt;/th&gt;
      &lt;th&gt;Action&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Space or Enter&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Opens the submenu and places focus on its first item.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Down Arrow&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Opens its submenu and places focus on the first item in the submenu.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Up Arrow&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Moves focus to the previous item, optionally wrapping from the first to the last.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Right Arrow&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Moves focus to the next item, optionally wrapping from the last to the first.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Left Arrow&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Moves focus to the previous item, optionally wrapping from the last to the first.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Home&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Moves focus to the first item in the current menu or menubar.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;End&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Moves focus to the last item in the current menu or menubar.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Any key&lt;/strong&gt; that corresponds to a printable character&lt;/td&gt;
      &lt;td&gt;Moves focus to the next menu item in the current menu whose label begins with that printable character.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Escape&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Closes the menu that contains focus and return focus to the element or context&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Tab&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Moves focus to the next element in the tab sequence, and if the item that had focus is not in a menubar, closes its menu and all open parent menu containers.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Shift + Tab&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Moves focus to the previous element in the tab sequence, and if the item that had focus is not in a menubar, closes its menu and all open parent menu containers.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;For the full spec on keyboard navigation, you can refer to the W3C spec &lt;a href=&quot;https://www.w3.org/TR/wai-aria-practices-1.1/#keyboard-interaction-11&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;implementation-tid-bits&quot;&gt;Implementation Tid Bits&lt;/h3&gt;
&lt;p&gt;We started with the example scripts that W3C provides in their &lt;a href=&quot;https://www.w3.org/TR/wai-aria-practices-1.1/examples/menubar/menubar-1/menubar-1.html&quot;&gt;menubar demos&lt;/a&gt;. These are free to use, fairly simple to follow and made a great starting point. The main class is applied during the React lifecycle at &lt;code class=&quot;highlighter-rouge&quot;&gt;componentDidMount()&lt;/code&gt; and passed our navigation &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;ul&amp;gt;&lt;/code&gt;. It simply traverses the DOM for &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;ul&amp;gt;&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;li&amp;gt;&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;a&amp;gt;&lt;/code&gt; elements setting the appropriate states and attributes for each. We added a data-column attribute to our react template to help traverse back up the dom tree to easily provide users with the ability to navigate between columns using the left and right arrow keys.&lt;/p&gt;

&lt;p&gt;Below is a quick screen capture demonstrating the roving tab index technique.&lt;/p&gt;
&lt;video width=&quot;100%&quot; autoplay=&quot;true&quot; loop=&quot;true&quot; name=&quot;keyboard navigation demo&quot; src=&quot;./assets/images/ada-keyboard-navigation/keyboard-navigation-demo.mov&quot; style=&quot;margin-top: 40px; border-bottom: solid 1px #ccc;&quot;&gt;&lt;/video&gt;

&lt;h3 id=&quot;challenges&quot;&gt;Challenges&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;In our submenus, few links in our small breakpoint menu are hidden from our large breakpoint. We needed a &lt;code class=&quot;highlighter-rouge&quot;&gt;setTimeout()&lt;/code&gt; to put a break in the order of operations so the browser would parse the CSS and then apply our keyboard navigation code. This allowed us to use ‘getComputedStyle()’ to skip over any elements that had &lt;code class=&quot;highlighter-rouge&quot;&gt;display: none;&lt;/code&gt;. Otherwise, the hidden elements broke our tab sequence because the script indexed the hidden anchor elements in the DOM. Because they were hidden there was nothing to focus next in the tab order.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Another &lt;code class=&quot;highlighter-rouge&quot;&gt;setTimeout()&lt;/code&gt; was needed to properly focus the first item when a submenu was opened. This was because of our “fancy” transition on the submenu &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;ul&amp;gt;&lt;/code&gt; from &lt;code class=&quot;highlighter-rouge&quot;&gt;opacity: 0&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;opactiy: 1&lt;/code&gt;. A similar problem again, focusing an item isn’t possible if it’s hidden, so we needed to pause our script to let that transition to run, allow the browser to render the changes and report them back, allowing javascript to get the latest, updated styles.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Having 2 actions for each nav item, one for the category landing page, and the other for the popup. This isn’t apparent when using a mouse and having the hover effect, but with just a keyboard, it needs to be clear to the user that there are 2 options. For now, we’ve styled the element with a down arrow when it’s in focus, gave the element a role of &lt;code class=&quot;highlighter-rouge&quot;&gt;link&lt;/code&gt;, and an attribute of &lt;code class=&quot;highlighter-rouge&quot;&gt;aria-haspopup&lt;/code&gt;. This provides visual and audio feedback. Optionally, and perhaps a future improvement would be to create a second element to focus and control the popup menu, separating it from the link to the category page. The W3C provides their own guidance on this &lt;a href=&quot;https://www.w3.org/WAI/tutorials/menus/flyout/#flyoutnavkbbtn&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Smaller breakpoints still need to be included and we have to go back and work on this. It’s possible a user may have a bluetooth keyboard connected to a tablet.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;conclusions--next-steps&quot;&gt;Conclusions &amp;amp; Next Steps&lt;/h3&gt;
&lt;p&gt;It’s fairly easy to make your site’s navigation more keyboard friendly and there are some great resources from the Web Accessibility Initiative that will help you do it. Going through this exercise exposed a few areas we could apply this same logic and improve our site’s overall accessibility. This work also highlighted the need to internally communicate this perspective in our &lt;a href=&quot;https://styleguide.hbc.com&quot;&gt;styleguide&lt;/a&gt; so our design and development teams can make sure we build things in an accessible way. We’ll be launching our new header for &lt;a href=&quot;thebay.com&quot;&gt;thebay.com&lt;/a&gt; in the coming months and eventually to all our sites.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Web Accessibility is a human right&lt;/li&gt;
  &lt;li&gt;Create efficient keyboard navigation patterns&lt;/li&gt;
  &lt;li&gt;Limit the number of key presses required to get to a specific part of the page&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So, if you’re updating your site’s navigation, hopefully what we’ve shared from our experience will help you make your nav more accessible to users who rely on a keyboard to surf the web.&lt;/p&gt;</content><author><name>[&quot;Jaret Stezelberger&quot;]</name></author><category term="WAI-ARIA" /><category term="Accessibility" /><category term="Navigation" /><category term="ADA" /><category term="Javascript" /><summary>The simplest way to understand the importance of web accessibility is to open a web browser, put on a blindfold, and try navigating a website. Despite a small percentage of users with disabilities, their human right to navigate the internet still stands. In this post I’ll share some of my learnings from making our navigation more accessible.</summary></entry><entry><title>ODSC Workshop on Experimental Reproducibility in Data Science</title><link href="https://tech.hbc.com/2018-05-07-experimental-reproducibility-in-data-science.html" rel="alternate" type="text/html" title="ODSC Workshop on Experimental Reproducibility in Data Science" /><published>2018-05-07T00:00:00-05:00</published><updated>2018-05-07T00:00:00-05:00</updated><id>https://tech.hbc.com/experimental-reproducibility-in-data-science</id><content type="html" xml:base="https://tech.hbc.com/2018-05-07-experimental-reproducibility-in-data-science.html">&lt;p&gt;On May 2nd, we presented at the &lt;a href=&quot;https://odsc.com/boston&quot;&gt;Open Data Science Conference&lt;/a&gt; in Boston, MA. We demonstrated
how to build a machine learning project from scratch with &lt;a href=&quot;https://github.com/IDSIA/sacred&quot;&gt;Sacred&lt;/a&gt;, an open source
library for experiment tracking, and how to view the results using
&lt;a href=&quot;https://github.com/chovanecm/sacredboard&quot;&gt;Sacredboard&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&quot;workshop-abstract&quot;&gt;Workshop Abstract&lt;/h1&gt;

&lt;p&gt;There are ways to incorporate experimental reproducibility into machine learning projects that are clean and lightweight.
In this introductory level workshop, we demonstrate how to use Sacred to motivate reproducible research and
experiment monitoring in machine learning. We discuss how this enables any data scientist to provide a solution
(a model or set of predictions) to any problem, compare their solution to previous models results on the same test
data, and select the best model for production. Finally, we provide examples of machine learning problems in retail
and demonstrate how data scientists can easily work across multiple problems.&lt;/p&gt;

&lt;h1 id=&quot;what-is-experimental-reproducibility&quot;&gt;What is Experimental Reproducibility&lt;/h1&gt;

&lt;p&gt;Specifying the inputs, contexts, and steps involved in producing a result such that one can execute those
instructions &lt;em&gt;and&lt;/em&gt; produce the same result.&lt;/p&gt;

&lt;h1 id=&quot;machine-learning-is-experiments&quot;&gt;Machine Learning is Experiments&lt;/h1&gt;

&lt;p&gt;You might be thinking, what is the connection between machine learning and experiments? Well, every time we build a
model, we’re making hypotheses on which data to use for training and testing, pre-processing steps to apply, features
and/or architectures to engineer, and learning algorithm(s) to use that will best fit our training data and generalize
to unseen data.&lt;/p&gt;

&lt;p&gt;Additionally, we’re running these experiments from dynamic and (sometimes) complex code bases, on computing environments
with a whole another host of specifications.&lt;/p&gt;

&lt;p&gt;So, while we are not working in a wetlab, we’re definitely running experiments and making many decisions that should
be recorded!&lt;/p&gt;

&lt;h1 id=&quot;why-do-we-need-an-approach-to-this&quot;&gt;Why do we need an approach to this&lt;/h1&gt;

&lt;p&gt;Adhoc efforts at tracking experiments are &lt;strong&gt;incomplete&lt;/strong&gt;, and &lt;strong&gt;messy&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Incomplete&lt;/strong&gt;: It becomes very hard to annotate everything that we want to track: the version of the code we’re
running; logging the config that we’re using for a particular run of an experiment (from the steps used for
preprocessing to the hyperparameters used in the model); the specifications of the host where the experiment is run;
and so on…&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Messy&lt;/strong&gt;: We want this information to be logged in such a way that we can easily add new parameters to track (without
having to change a lot of code) and search through experiments that we’ve already tried. Looking through pages of a
notebook, or scanning excel sheets stored in various folders is not an efficient and desirable way to do this.&lt;/p&gt;

&lt;h1 id=&quot;what-should-we-track-to-make-machine-learning-reproducible&quot;&gt;What should we track to make Machine Learning reproducible?&lt;/h1&gt;

&lt;p&gt;We suggest tracking the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Version Control: What is the git hash of the repository when we run the experiment? Is the code that was run in a
&lt;em&gt;dirty&lt;/em&gt; state (some local changes)? To take this a step further, can we just store the source code that we ran?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Config: This might include (but is not limited to) which data is loaded for training/testing, preprocessing steps,
learning algorithms, hyperparameters, etc&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Seed: Set/store a global seed so that any functions that have some randomness yield consistent results.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Results: Store the performance of each run so that we can compare different experimental runs
and select the best model. For certain models, we may also want to track its performance for each training
step.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;enter-sacred&quot;&gt;Enter Sacred&lt;/h1&gt;

&lt;p&gt;Sacred makes this possible. Sacred is a tool that is designed to introduce experimental reproducibility into
projects with very little overhead. There’s 3 actors in the Sacred ecosystem: &lt;strong&gt;Ingredients&lt;/strong&gt;, &lt;strong&gt;Experiments&lt;/strong&gt;, and
&lt;strong&gt;Observers&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;We can define &lt;strong&gt;Ingredients&lt;/strong&gt;:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Sacred&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Ingredient&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;name_ingredient&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Ingredient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'name'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name_ingredient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;first&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Jane&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;last&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Doe&quot;&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name_ingredient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;capture&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fullname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;last&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Jane&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Doe&quot;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We can define an &lt;strong&gt;Experiment&lt;/strong&gt; that uses Ingredients to produce some outcome that we wish to record:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Sacred&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Experiment&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;my_ingredients&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name_ingredient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fullname&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;greeting_ex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Experiment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'greeting_experiment'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ingredients&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name_ingredient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;greeting_ex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;greeting&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Hello&quot;&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;greeting_ex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;automain&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;greeting&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;greeting&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;, &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fullname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Finally, we can run this experiment from the command line with an &lt;strong&gt;Observer&lt;/strong&gt; (e.g. a mongo server), which will record
everything we have explicitly indicated that we wish to track (any parameter defined in a function with an
&lt;code class=&quot;highlighter-rouge&quot;&gt;@Ingredient.config&lt;/code&gt; decorator), along with what Sacred implicitly tracks (source code, version control info, seed,
host info, etc). Assuming the experiment code above is written in a file called &lt;code class=&quot;highlighter-rouge&quot;&gt;greeting_experiment.py&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;python greeting_experiment.py &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; sacred
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;-m sacred&lt;/code&gt; parameter specifies that the observer should record everything to the sacred db in a local mongo
instance. Sacred has a powerful command line tool in which we can modify the values of parameters before an experiment
run.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;python greeting_experiment.py &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; sacred with greeting_experiment.greeting&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;Goodbye
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This will return the result &lt;code class=&quot;highlighter-rouge&quot;&gt;Goodbye, Jane Doe&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Sacred is an extremely lightweight and powerful tool - we urge you to check out
&lt;a href=&quot;https://github.com/IDSIA/sacred&quot;&gt;Sacred&lt;/a&gt;, and our presentation materials for more examples of how to use Sacred in
machine learning with a variety of examples including hyperparmater optimization and model blending.&lt;/p&gt;

&lt;h2 id=&quot;materials&quot;&gt;Materials&lt;/h2&gt;

&lt;p&gt;Examples using Sacred to do reproducible machine learning on &lt;a href=&quot;https://www.kaggle.com/c/titanic&quot;&gt;titanic survivorship&lt;/a&gt;
are available here:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/gilt/odsc-2018&quot;&gt;Repository&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/gilt/odsc-2018/blob/master/slides.pdf&quot;&gt;Slides&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>[&quot;Karthik Rajasethupathy&quot;, &quot;Jason Tam&quot;]</name></author><category term="sacred" /><category term="data science" /><category term="python" /><category term="odsc2018" /><category term="workshop" /><category term="conferences" /><summary>On May 2nd, we presented at the Open Data Science Conference in Boston, MA. We demonstrated
how to build a machine learning project from scratch with Sacred, an open source
library for experiment tracking, and how to view the results using
Sacredboard.</summary></entry><entry><title>Why you should volunteer for Smart Futures</title><link href="https://tech.hbc.com/2018-04-20-smart-futures.html" rel="alternate" type="text/html" title="Why you should volunteer for Smart Futures" /><published>2018-04-20T00:00:00-05:00</published><updated>2018-04-20T00:00:00-05:00</updated><id>https://tech.hbc.com/smart-futures</id><content type="html" xml:base="https://tech.hbc.com/2018-04-20-smart-futures.html">&lt;p&gt;Dublin is a great place for volunteering in Tech initiatives !&lt;/p&gt;

&lt;p&gt;Two years ago I started mentoring in a &lt;a href=&quot;https://coderdojo.com/&quot;&gt;CoderDojo&lt;/a&gt;, and, at HBC we recently joined the &lt;a href=&quot;http://www.smartfutures.ie/&quot;&gt;Smart Futures&lt;/a&gt; initiative.&lt;/p&gt;

&lt;p&gt;So, I want to share with you some volunteering tips, lessons learned along the way, and why we joined &lt;a href=&quot;http://www.smartfutures.ie/&quot;&gt;Smart Futures&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&quot;how-to-pick-an-initiative&quot;&gt;How to pick an initiative&lt;/h1&gt;

&lt;p&gt;With so many great tech initiatives out there and limited time to contribute, it can be a tough choice for a volunteer to pick one (or a few) initiatives to get involved with.&lt;/p&gt;

&lt;p&gt;Different initiatives target different issues (e.g. diversity, education) and as a volunteer your tasks will vary (e.g. teaching children, presenting to adults, organising events).&lt;/p&gt;

&lt;h2 id=&quot;4-questions-to-ask-yourself&quot;&gt;4 questions to ask yourself&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;answers should be very subjective but I included mine for reference&lt;/em&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;What issues matter the most to me ?&lt;/p&gt;

    &lt;p&gt;Students choosing CS (Computer Science) in college do not have a concrete idea of what CS is.&lt;/p&gt;

    &lt;p&gt;I found that many class-mates were deceived as they had a false and stereotypical expectation of what CS would be. On the other side, many highschool class-mates never even considered CS either (for the same reason) and might have missed a passion!&lt;/p&gt;

    &lt;p&gt;Therefore, I want to educate students about CS to break stereotypes and allow them to make an informed choice.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;How can I address those issues ?&lt;/p&gt;

    &lt;p&gt;I can use my CS knowledge and experience working in Tech to inform students&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Do I have other expectations about my volunteering experience ?&lt;/p&gt;

    &lt;p&gt;I like teaching, explaining to children and presenting in general&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Is there an existing initiative aligning with my goals and expectations ?&lt;/p&gt;

    &lt;p&gt;Yes, at least 2 that I know of: &lt;a href=&quot;https://coderdojo.com/&quot;&gt;CoderDojo&lt;/a&gt; and &lt;a href=&quot;http://www.smartfutures.ie/&quot;&gt;Smart Futures&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;starting-your-own&quot;&gt;Starting your own&lt;/h2&gt;

&lt;p&gt;Joining an existing initiative is great: you get to learn from volunteers with more experience and the overhead of running an association (e.g. paperwork) is done for you.&lt;/p&gt;

&lt;p&gt;But.. depending on where you live / where you work, there might not be an option that suits you. And in the case that you are starting your own: many initiatives make resources available to the public through their website, and you can connect with their community of volunteers through their communication channels (&lt;a href=&quot;https://slack.com/&quot;&gt;Slack&lt;/a&gt; / email).&lt;/p&gt;

&lt;p&gt;Some initiatives like &lt;a href=&quot;https://coderdojo.com/&quot;&gt;CoderDojo&lt;/a&gt; are international initiatives and will help you set up your own coding classes.&lt;/p&gt;

&lt;h1 id=&quot;what-is-smart-futures&quot;&gt;What is Smart Futures&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;http://www.smartfutures.ie/&quot;&gt;Smart Futures&lt;/a&gt;’ objective is getting children interested in &lt;a href=&quot;https://en.wikipedia.org/wiki/Science,_technology,_engineering,_and_mathematics&quot;&gt;S.T.E.M&lt;/a&gt; subjects in secondary school and at third level.
It is coordinated by the &lt;a href=&quot;http://www.sfi.ie/&quot;&gt;Science Foundation Ireland&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There are two types of events:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;you contacting directly schools or highschools to give talks / presentations / workshops to classes, the format is free&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.smartfutures.ie/&quot;&gt;Smart Futures&lt;/a&gt; asking you to send some volunteers to participate at events they are organising (occasional)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You have no obligations of frequency, you only have to contact &lt;a href=&quot;http://www.smartfutures.ie/&quot;&gt;Smart Futures&lt;/a&gt; when you give a presentation to a school to help them map what schools are getting visited.&lt;/p&gt;

&lt;h1 id=&quot;why-its-important&quot;&gt;Why it’s important&lt;/h1&gt;

&lt;h2 id=&quot;students-want-to-fit-in&quot;&gt;Students want to fit in&lt;/h2&gt;

&lt;p&gt;In a &lt;a href=&quot;http://www.smartfutures.ie/sites/default/files/resources/STEM%20survey%20results%20infographic%20update.pdf&quot;&gt;survey&lt;/a&gt;, &lt;a href=&quot;http://www.smartfutures.ie/&quot;&gt;Smart Futures&lt;/a&gt; asked 2,000 first year students across Ireland about what influenced them when selecting their college course:
62% of student said ‘fitting in’ was the main reason for their choice !&lt;/p&gt;

&lt;p&gt;You can help break stereotypes; make students see the vast range of careers in S.T.E.M. There are so many radically different careers in Technology alone it is hard to imagine that someone would not ‘fit in’, but it is also very hard to picture some of those roles as a child (without an awesome volunteer to help).&lt;/p&gt;

&lt;h2 id=&quot;children-need-role-models&quot;&gt;Children need role models&lt;/h2&gt;

&lt;p&gt;Diversity has been a main topic in Tech industry issues related talks in the past few years. &lt;a href=&quot;https://coderdojo.com/&quot;&gt;CoderDojo&lt;/a&gt; have shown in their 2017 &lt;a href=&quot;https://coderdojo.com/news/2018/03/26/coderdojo-annual-survey-results-2017/&quot;&gt;survey&lt;/a&gt; that the percentage of girl students (29%) match the number of girl mentors (29%) and they were left wondering if there was some correlation..&lt;/p&gt;

&lt;p&gt;Children want to identify with their role models; the example above is about gender but we need mentors with all kinds of personalities and backgrounds.&lt;/p&gt;

&lt;h2 id=&quot;going-to-the-schools&quot;&gt;Going to the schools&lt;/h2&gt;

&lt;p&gt;Events and coding classes need to be very well advertised to appeal to children that have no interest in Tech (yet) or ‘non Tech-aware’ parents. Going to the classes you are talking to everyone, including these students! It is truly a unique chance for them.&lt;/p&gt;

&lt;p&gt;To quote the &lt;a href=&quot;http://www.smartfutures.ie/&quot;&gt;Smart Futures&lt;/a&gt; website:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Many students have no access to anyone working in science and technology, or may not know anyone that went to college.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;our-experience&quot;&gt;Our experience&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://ie.linkedin.com/in/jakewhelan&quot;&gt;Jake Whelan&lt;/a&gt; and I have given 2 presentations to classes of ~50 children aged 10-11, here’s some take-aways from  preparing and giving those presentations.&lt;/p&gt;

&lt;h2 id=&quot;presentation-format&quot;&gt;Presentation format&lt;/h2&gt;

&lt;p&gt;The presentation format is not enforced by &lt;a href=&quot;http://www.smartfutures.ie/&quot;&gt;Smart Futures&lt;/a&gt;, although there is an &lt;a href=&quot;http://www.smartfutures.ie/sites/default/files/resources/Sample%20%20Smart%20Futures%20School%20%20Presentation%20Template.pdf&quot;&gt;example&lt;/a&gt; on their website.&lt;/p&gt;

&lt;p&gt;Nonetheless: personalise it to create a format that works for you, make it interactive and adapt the presentation to the age of your audience (a 10 yrs old is probably not interested in eCommerce)&lt;/p&gt;

&lt;h2 id=&quot;should-you-talk-about-your-company-&quot;&gt;Should you talk about your company ?&lt;/h2&gt;

&lt;p&gt;Children want concrete examples, and it is easy to go in details when talking about your daily life.&lt;/p&gt;

&lt;p&gt;However, you need to take your audience into consideration. For example: our roles are linked to online shopping; but a 10-11 yrs old will probably never have purchased anything on an eCommerce website!&lt;/p&gt;

&lt;p&gt;We decided to let the children know they could ask questions about applications unrelated to eCommerce that they use every day (e.g. in these classes Snapchat was very popular).&lt;/p&gt;

&lt;h2 id=&quot;dont-be-shy-show-some-code&quot;&gt;Don’t be shy: show some code!&lt;/h2&gt;

&lt;p&gt;We firmly believe that showing a simple snippet of code, explaining in details pieces of logic, asking the students questions about it and making them guess what specific parts are doing, is key to demystify what application development really is.&lt;/p&gt;

&lt;p&gt;But first you need to introduce the concept of coding itself, so here’s a rough transcript of how we explained it to 10-11 yrs old:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;When talking to a person you use a language to communicate ideas to that person. There are many “human languages”: Irish, English, French..
But a machine only understands 0s and 1s and it would be very hard for humans to communicate ideas only using 0s and 1s; so, coding languages were created: an intermediate that follows very strict rules for the machine to be able to convert it to 0s and 1s and just like in “human languages”, there are many coding languages: JavaScript, Python, Scala, Java etc..&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Our coding example is a little game, which is based on a very simplified version of &lt;a href=&quot;orteil.dashnet.org/cookieclicker/&quot;&gt;Cookie clicker&lt;/a&gt; (it was very popular among children 1-2 yrs ago).&lt;/p&gt;

&lt;p&gt;A web-page shows a cookie and a number that increments every time you click on the it. We spend as much time as needed an let the children ask all the questions they have in order to understand how the code works.&lt;/p&gt;

&lt;p&gt;2 questions we got:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Do you have to learn all the different languages ?&lt;/p&gt;

    &lt;p&gt;Great occasion to point out that languages are very similar in their structure and follow the same logic&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Why do the words have different colors ?&lt;/p&gt;

    &lt;p&gt;Coding languages follow very specific rules so each word has a role like variables, values, keywords etc.. just like we have verbs, nouns and adverbs! So the text editors we use color the words for us to help differentiate between the different roles.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It is very encouraging to hear such practical questions being asked (like they could picture themselves coding already!)&lt;/p&gt;

&lt;p&gt;The goal of this little example is not to teach them how to code but to:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;see a very concrete example (write code and see the result on the web page)&lt;/li&gt;
  &lt;li&gt;demystify code&lt;/li&gt;
  &lt;li&gt;explain some concepts that are the building blocks of coding, like conditions and variables; which can be used later-on to give concrete explanations about how certain features of the applications they are familiar with, work (at a high level)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can find the code for the game on &lt;a href=&quot;https://github.com/jakewhelan/sfi-cookie-clicker/&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;make-some-time-at-the-end&quot;&gt;Make some time at the end&lt;/h2&gt;

&lt;p&gt;We always make sure to leave at least 1/3 of the time for questions at the end. The questions can be about anything!&lt;/p&gt;

&lt;p&gt;You showed code and the children now have a concrete idea of what development is like. What should happen is that they want to tie-up what they just learned with applications they are familiar with.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;e.g. How does a website know my username is already taken when I create an account ?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Children will have a concept of storing files in a computer (which can be used to explain databases), and, thanks to the previous demo they now have an understanding of conditionals and variables ! That is enough to explain many features at a high level.&lt;/p&gt;

&lt;p&gt;This “Ask me anything” session at the end does a good job at shifting the way the students look at applications they use every day: now they do not accept them to be “black-boxes” anymore and look to understand how they work.&lt;/p&gt;

&lt;h2 id=&quot;follow-up&quot;&gt;Follow up&lt;/h2&gt;

&lt;p&gt;Send resources to the teachers after the presentation, you might have sparked interests for programming so make sure they know where to go.&lt;/p&gt;

&lt;p&gt;My favorites are &lt;a href=&quot;https://code.org/&quot;&gt;Code.org&lt;/a&gt; and &lt;a href=&quot;https://scratch.mit.edu/&quot;&gt;Scratch&lt;/a&gt;, but I also recommend children to ask their parents to sign them up for &lt;a href=&quot;https://coderdojo.com/&quot;&gt;CoderDojo&lt;/a&gt; (which is free)&lt;/p&gt;

&lt;h1 id=&quot;how-do-i-get-involved&quot;&gt;How do I get involved&lt;/h1&gt;

&lt;p&gt;You can get involved individually or as a company by contacting &lt;a href=&quot;smartfutures@sfi.ie&quot;&gt;smartfutures@sfi.ie&lt;/a&gt;, you will be invited to a presentation about the initiative and be registered as a volunteer.&lt;/p&gt;

&lt;h1 id=&quot;help-us-find-schools&quot;&gt;Help us find schools&lt;/h1&gt;

&lt;p&gt;If you are a parent, or part of a school council, you can help us by reaching out to teachers/principals who would be interested in having us present to their students (in the Dublin area).&lt;/p&gt;</content><author><name>Daniel Mateus Pires</name></author><category term="stem" /><category term="initiatives" /><category term="children" /><category term="volunteering" /><summary>Dublin is a great place for volunteering in Tech initiatives !</summary></entry><entry><title>A Non-Technical Guide to Posting to the Tech Blog</title><link href="https://tech.hbc.com/2018-04-12-non-technical-guide-to-posting-to-the-blog.html" rel="alternate" type="text/html" title="A Non-Technical Guide to Posting to the Tech Blog" /><published>2018-04-12T00:00:00-05:00</published><updated>2018-04-12T00:00:00-05:00</updated><id>https://tech.hbc.com/non-technical-guide-to-posting-to-the-blog</id><content type="html" xml:base="https://tech.hbc.com/2018-04-12-non-technical-guide-to-posting-to-the-blog.html">&lt;p&gt;Our tech organization is obviously made up of more than just developers.  Non-developers have great insight from their work too! This post is a nudge to all my fellow colleagues who are also doing amazing work and would like to share, but feel intimitated by the pull request process.&lt;/p&gt;

&lt;p&gt;Are you a techie? We have a guide for developers &lt;a href=&quot;https://github.com/saksdirect/hbc-tech-blog/blob/master/docs/contributing.md&quot;&gt;here&lt;/a&gt;, for everyone else, read on.&lt;/p&gt;

&lt;h2 id=&quot;step-1-write-your-post&quot;&gt;Step 1: Write Your Post&lt;/h2&gt;

&lt;p&gt;Writing is probably the hardest part of this whole thing. All you need to do is open a new Google Doc and type one letter after the other. Organize your thoughts by utilizing built in text headings; ie: bulleted lists, and text styles already available in Google Docs. As an example, take a look at &lt;a href=&quot;https://docs.google.com/document/d/1Gdu5oIoqV7FuIdjkWK8rshUEeBPQ0uUm2RZ3RuPc850/edit?usp=sharing&quot;&gt;the doc used to create this post&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;./assets/images/blog-post-how-to/headings.png&quot; alt=&quot;Sample Headings&quot; title=&quot;Sample Headings&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;step-2-add-some-images&quot;&gt;Step 2: Add Some Images&lt;/h2&gt;

&lt;p&gt;People like pictures! Illustrate your ideas with a few images, screen captures, or even cat GIFs if appropriate. Insert your images via the toolbar in Google Docs, but keep the original assets handy, we’ll need to upload them to Github and adjust the image paths later. Don’t worry about the technical stuff yet, just keep writing.&lt;/p&gt;

&lt;h2 id=&quot;step-3-convert-your-google-doc-to-markdown&quot;&gt;Step 3: Convert Your Google Doc to Markdown&lt;/h2&gt;

&lt;p&gt;The Markdown stuff helps some web applications format text, create links, and embed images. Don’t be scared, most of the conversion can be automated for you. There is a Google Docs Add-on called, you guessed it, Google Docs To Markdown, or GD2md for short. Follow &lt;a href=&quot;https://chrome.google.com/webstore/detail/gd2md-html/igffnbdfnodiaphfmfaiiaegmoljbghf?utm_source=permalink&quot;&gt;this link&lt;/a&gt; to add it to your Google Drive.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://chrome.google.com/webstore/detail/gd2md-html/igffnbdfnodiaphfmfaiiaegmoljbghf?utm_source=permalink&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;./assets/images/blog-post-how-to/gd-to-md.png&quot; alt=&quot;gd-to-md&quot; title=&quot;gd-to-md&quot; class=&quot;center-image&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h4 id=&quot;when-youre-happy-with-what-youve-written-follow-the-steps-below&quot;&gt;When you’re happy with what you’ve written, follow the steps below:&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;From the Google Docs &lt;strong&gt;Add-ons&lt;/strong&gt; menu, select &lt;strong&gt;GD2md-html &amp;gt; Convert&lt;/strong&gt;. The sidebar window opens.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Use the Markdown button in the sidebar window to convert your document to Markdown. If you select part of the document, GD2md-html will convert only the selection. Otherwise it will convert the entire document. Click the Docs link for more information.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Preview your post by copying and pasting the text from the sidebar into an online editor like &lt;a href=&quot;https://stackedit.io/&quot;&gt;Stack Edit&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;You’ll see there are a few extra lines of text added during the conversion. These can safely be removed, as they’re just warnings about image paths needing to be corrected. We’ll tackle these changes later.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;step-4-add-some-yaml&quot;&gt;Step 4: Add Some YAML&lt;/h2&gt;

&lt;p&gt;We use YAML formatting to store information about each post ie: title, post date, category, etc. Copy the snippet below and change the values according to your post. &lt;em&gt;(make sure to copy the 3 dashes at the beginning and ending)&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;---
title: A Non-Technical Guide to Posting to the Tech Blog.
description: Step by step instructions explaining how to post to the tech blog without requiring a degree in computer science.
author: Jaret Stezelberger
date: 2018-04-12
categories:
- Culture
tags:
- Tech Blog
- How To
- Culture
---
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;step-5-upload-everything-to-github&quot;&gt;Step 5: Upload Everything To Github&lt;/h2&gt;

&lt;p&gt;If you don’t already have GitHub account, get one &lt;a href=&quot;https://github.com/&quot;&gt;here&lt;/a&gt;. It’s the modern library card! Once you’re signed into your Github Account, you’re just a few simple steps away from posting.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Copy (Fork) HBC Tech Blog To Your GitHub Account&lt;/li&gt;
  &lt;li&gt;Create A Copy For Your New Work (Create a New Branch)&lt;/li&gt;
  &lt;li&gt;Add Your Post File and Then Save (Commit) it&lt;/li&gt;
  &lt;li&gt;If Needed, Upload A Folder of Assets (Another Commit)&lt;/li&gt;
  &lt;li&gt;Let The Team Know You’re Ready to Publish (Create A New Pull Request in GitHub)&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;heres-a-closer-look-at-those-steps-one-by-one&quot;&gt;Here’s a closer look at those steps one by one:&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Step 5.1&lt;/strong&gt; Fork It&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;./assets/images/blog-post-how-to/01-fork-button.png&quot; alt=&quot;Fork The Blog Repo&quot; title=&quot;Fork the Blog Repo&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Step 5.2&lt;/strong&gt; Create A Branch For Your New Post&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;./assets/images/blog-post-how-to/02-create-new-branch.png&quot; alt=&quot;Create A New Branch&quot; title=&quot;Create A New Branch&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Step 5.3&lt;/strong&gt; Navigate to the Posts Folder&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;./assets/images/blog-post-how-to/03-navigate-to-posts-directory.png&quot; alt=&quot;Navigate to the Posts Directory&quot; title=&quot;Navigate to the Posts Directory&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Step 5.4&lt;/strong&gt; Create Your Post File&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;./assets/images/blog-post-how-to/04-create-new-file.png&quot; alt=&quot;Create a New File&quot; title=&quot;Create a New File&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Step 5.5&lt;/strong&gt; Save Your Changes&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;./assets/images/blog-post-how-to/05-commit-new-file.png&quot; alt=&quot;Commit Your File&quot; title=&quot;Commit Your File&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Step 5.6&lt;/strong&gt; Add Your Images&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;./assets/images/blog-post-how-to/06-navigate-to-images-directory.png&quot; alt=&quot;Navigate to the Images Directory&quot; title=&quot;Navigate to the Images Directory&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Step 5.7&lt;/strong&gt; Upload your images&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;./assets/images/blog-post-how-to/07-upload-your-images.png&quot; alt=&quot;Upload Your Images&quot; title=&quot;Upload Your Images&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Step 5.8&lt;/strong&gt; Update Image Your Paths&lt;/p&gt;

&lt;p&gt;In the previous step, converting your Google Doc to Markdown, image paths were set with placeholders. You’ll need to change these to correctly match the &lt;strong&gt;folder&lt;/strong&gt; and &lt;strong&gt;file&lt;/strong&gt; names you’ve uploaded to GitHub.&lt;/p&gt;

&lt;p&gt;In our example above they would change from:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;![alt_text](images/blog-post-how-to0.png &quot;image_tooltip&quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;to&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;![Fork The Blog Repo](./assets/images/blog-post-how-to/01-fork-button.png &quot;Fork the Blog Repo&quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Step 5.9&lt;/strong&gt; Create a New Pull Request&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;./assets/images/blog-post-how-to/08-create-pull-request.png&quot; alt=&quot;Create Your Pull Request&quot; title=&quot;Create Your Pull Request&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;
&lt;p&gt;Hopefully, after reading this post, the tech blog has been demystified and the few technical things around markdown conversion and fixing image paths won’t scare you away. If you get stuck, try looking for your answer in the documentation &lt;a href=&quot;https://github.com/saksdirect/hbc-tech-blog/blob/master/docs/contributing.md&quot;&gt;here&lt;/a&gt;. If you need help with Markdown, there are a ton of resources online. &lt;a href=&quot;https://stackedit.io/&quot;&gt;Stack Edit&lt;/a&gt; is your friend.&lt;/p&gt;</content><author><name>[&quot;Jaret Stezelberger&quot;]</name></author><category term="Tech Blog" /><category term="Culture" /><summary>Our tech organization is obviously made up of more than just developers.  Non-developers have great insight from their work too! This post is a nudge to all my fellow colleagues who are also doing amazing work and would like to share, but feel intimitated by the pull request process.</summary></entry><entry><title>Brand Alerts V2: Breaking Down a Monolith with AWS</title><link href="https://tech.hbc.com/2018-04-02-brand-alerts-v2-breaking-down-a-monolith-with-aws.html" rel="alternate" type="text/html" title="Brand Alerts V2: Breaking Down a Monolith with AWS" /><published>2018-04-02T00:00:00-05:00</published><updated>2018-04-02T00:00:00-05:00</updated><id>https://tech.hbc.com/brand-alerts-v2-breaking-down-a-monolith-with-aws</id><content type="html" xml:base="https://tech.hbc.com/2018-04-02-brand-alerts-v2-breaking-down-a-monolith-with-aws.html">&lt;p&gt;Recently, team T-Rex worked on the re-architecture of the
Brand Alerts back end system, a project which we named Brand Alerts V2.
In this blog, I share our new architecture detailing some of the new AWS
powered components.&lt;/p&gt;

&lt;h1 id=&quot;introduction&quot;&gt;Introduction&lt;/h1&gt;

&lt;p&gt;Brand Alerts V2 breaks down the monolithic architecture of Brand Alerts
V1, into small, independent micro services. It enhances flexibility and
extensibility of the system, not to forget, facilitates agile development,
continuous integration and delivery. It also addresses some of our recent
pain points- database and thread scheduling issues, resulting at times
in non delivery of brand alert emails. Our intent was to delegate much
of the boilerplate work to AWS tools and services, which are built to
handle these use cases in tried and tested fashion and at scale.&lt;/p&gt;

&lt;h1 id=&quot;what-are-brand-alerts&quot;&gt;What Are Brand Alerts?&lt;/h1&gt;

&lt;p&gt;Before I go any further, let me describe what Brand Alerts are.&lt;/p&gt;

&lt;p&gt;Brand Alerts are emails sent to Gilt members notifying them of an upcoming
sale on a brand of their liking. A brand alert email is the ideal way to
beat the crowd and avail deep discounts on high-end fashion
brands. A typical brand alert email is sent in the evening (usually
around 6 PM) a day prior to when the brand goes on sale.&lt;/p&gt;

&lt;p&gt;It should also be noted that Brand Alert emails have one of the highest
click-through rates (among all our triggered emails) and so business is
always looking to enhance and experiment, in order to squeeze more out
of these emails.&lt;/p&gt;

&lt;h1 id=&quot;high-level-technical-components&quot;&gt;High Level Technical Components&lt;/h1&gt;

&lt;p&gt;A good first step in system design is to chalk out the various building
blocks. Here are the high level technical components that constitute the
Brand Alerts system-&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Front End- for Marketing team to create, visualize brand alert email&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Database- to store a brand alert record (with brands, sales and their relevant info)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Data access layer for the database&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Brand Alerts API- that other components can call to manage or get information on brand alerts&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Generate audience (business logic component)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Render HTML (business logic component)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Send emails (business logic component)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Job scheduler for components 5-7&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;brand-alerts-v1&quot;&gt;Brand Alerts V1&lt;/h1&gt;

&lt;p&gt;Before I introduce the V2 architecture, let me establish a baseline by
talking about Brand Alerts V1. Here is the architecture diagram (with
the distribution of aforementioned eight components)-&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;./assets/images/brand-alerts-v2-breaking-down-a-monolith-with-aws/brand-alerts-v1-arch.png&quot; alt=&quot;alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The service (&lt;code class=&quot;highlighter-rouge&quot;&gt;svc-email-brand-alert&lt;/code&gt;) is a Scala app based on standard
core-server-client model. As is evident from the diagram, this
component is doing a lot of heavy lifting. In addition to holding all the
business logic on how to generate audience and render HTML, it is also a
data access layer, an API (client module) and job scheduler (through a
separate &lt;code class=&quot;highlighter-rouge&quot;&gt;Scheduler&lt;/code&gt; thread using Java’s &lt;code class=&quot;highlighter-rouge&quot;&gt;ExecutionService&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Although most of the codebase is located inside one repo, this monolithic
architecture faces several disadvantages. It is complex, difficult to
maintain and troubleshoot by new team members, difficult to test in smaller
pieces and has multiple single points of failure that can bring down the
whole system.&lt;/p&gt;

&lt;h1 id=&quot;brand-alerts-v2&quot;&gt;Brand Alerts V2&lt;/h1&gt;

&lt;p&gt;Allow me to introduce Brand Alerts V2 with the following architecture
diagram (again, with markings for the eight technical components)-&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;./assets/images/brand-alerts-v2-breaking-down-a-monolith-with-aws/brand-alerts-v2-arch.png&quot; alt=&quot;alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;At first glance, one notices a lot more boxes and arrows. I can assure
you that this is a good thing. The monolithic service piece of V1 has now
been broken down into several smaller pieces, each of which is doing one
or maximum two things and is doing it rather well. These are small, yet
powerful components with baked in scalability and cohesiveness, being part
of the AWS family.&lt;/p&gt;

&lt;h1 id=&quot;new-components&quot;&gt;New Components&lt;/h1&gt;

&lt;p&gt;Next, let me elaborate on some of the newly born, super-charged components.&lt;/p&gt;

&lt;h2 id=&quot;brand-alerts-job&quot;&gt;Brand Alerts Job&lt;/h2&gt;

&lt;p&gt;The core component of the brand alerts process is &lt;code class=&quot;highlighter-rouge&quot;&gt;trex-job-brand-alerts&lt;/code&gt;.
The job is written in Scala and is scheduled via AWS Batch (Sundial) to
run at a regular interval. No more maintaining our own &lt;code class=&quot;highlighter-rouge&quot;&gt;Scheduler&lt;/code&gt; thread!&lt;/p&gt;

&lt;p&gt;When the job starts, a two step process is triggered. First, an audience
is generated for each sale/brand in the brand alert. A call is made to
Affinity API to get users who have an ‘affinity for the brand’. This set
of users is then filtered based on the user’s subscription to the brand
alert email and also to preserve his/her brand alert email receive limit
(cadence check). In the second step, a brand alert event message
is constructed corresponding to each user in the filtered
set and is sent to the &lt;code class=&quot;highlighter-rouge&quot;&gt;consumer-email-brand-alert&lt;/code&gt; SQS queue.&lt;/p&gt;

&lt;p&gt;As previously stated, the Brand Alerts job is configured to run via
&lt;a href=&quot;https://github.com/gilt/sundial&quot;&gt;Sundial&lt;/a&gt;. Sundial, created by Gilt
engineers, is an open source tool build on top
of AWS Batch. This tool enhances AWS Batch capabilities by providing
features such as job scheduling, multi job dependency management,
job dashboard, etc. All job settings are configurable and reside in
&lt;code class=&quot;highlighter-rouge&quot;&gt;bin/job-config.template.json&lt;/code&gt;. These include maximum runtime, number of
retries, PagerDuty alerts (in case of job failure), to name a few.&lt;/p&gt;

&lt;h2 id=&quot;brand-alerts-api&quot;&gt;Brand Alerts API&lt;/h2&gt;

&lt;p&gt;The API for Brand Alerts V2 (&lt;code class=&quot;highlighter-rouge&quot;&gt;api-brand-alert&lt;/code&gt;) is written in Python and
is an AWS Lambda, built using &lt;a href=&quot;https://github.com/aws/chalice&quot;&gt;Chalice&lt;/a&gt;
(which also provides a complimentary AWS API Gateway layering in front
of AWS Lambda).&lt;/p&gt;

&lt;p&gt;AWS Lambda provides a lightweight, “server-less” environment to host the
API’s endpoints, which are used to manage the lifecycle of a brand alert,
from creation to deletion. API Gateway, on the other hand, manages the
lifecycle of the API itself and provides valuable features such as access
control and traffic monitoring.&lt;/p&gt;

&lt;p&gt;In the root folder of the project, an &lt;code class=&quot;highlighter-rouge&quot;&gt;api.json&lt;/code&gt; file details resources
and data models of the API and is uploaded to
&lt;a href=&quot;https://app.apibuilder.io/gilt/api-brand-alert/latest&quot;&gt;API Builder&lt;/a&gt;
for versioning and client generation.&lt;/p&gt;

&lt;p&gt;This component also acts as the Data Access Layer to the DynamoDB
database. This ensures that no other component has direct access to the
database, and that any component that needs to interact with the
database must go through the API.
&lt;a href=&quot;http://boto3.readthedocs.io/en/latest/reference/services/dynamodb.html&quot;&gt;Boto3&lt;/a&gt;
library is used to obtain a Python client for DynamoDB.&lt;/p&gt;

&lt;h2 id=&quot;brand-alerts-consumer&quot;&gt;Brand Alerts Consumer&lt;/h2&gt;

&lt;p&gt;The brand alert event messages sent to &lt;code class=&quot;highlighter-rouge&quot;&gt;consumer-email-brand-alert&lt;/code&gt; queue
are picked up by &lt;code class=&quot;highlighter-rouge&quot;&gt;BrandAlertConsumer&lt;/code&gt; (in &lt;code class=&quot;highlighter-rouge&quot;&gt;consumer-email&lt;/code&gt;). The consumer
polls for messages at a configurable interval. On finding a message in
the queue, the consumer first renders an HTML body from the information
contained in the message. Subsequently, it creates an object wrapper for
the HTML body and sends it to &lt;code class=&quot;highlighter-rouge&quot;&gt;email-gateway&lt;/code&gt; (which then sends it to
our Email Service Provider (ESP), SparkPost, for delivery).&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;consumer-email-brand-alert&lt;/code&gt; queue is an Amazon SQS queue and has an
associated Dead Letter Queue (DLQ) for message persistence in case of
failure. This lightweight component is fast, secure, reliable and can
scale elastically.&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;Since its Production launch in early February, Brand Alerts V2 has been
running smoothly, without fail, every day, in a timely, reliable manner.
The new architecture has emboldened Business, Product and Tech to
outline future iterations, packing more features than ever before.&lt;/p&gt;

&lt;p&gt;For the Tech team, this effort was a win on many levels. We were able to
envision and bring to fruition a micro services architecture, which
promises to be a step up from its previous iteration in all aspects.
In the process, through our research and experimentation, we acquired
knowledge of various AWS tools and other third party libraries.&lt;/p&gt;

&lt;p&gt;Finally, AWS, with its vast set of tools and services, is instrumental
in building powerful, resilient software. We should invest time and
resources in finding the right tools for the job; I promise you it is
well worth the effort.&lt;/p&gt;</content><author><name>Kinshuk Varshney</name></author><category term="aws" /><category term="batch" /><category term="lambda" /><category term="api gateway" /><category term="sqs" /><category term="dynamo" /><category term="sundial" /><category term="trex" /><category term="email" /><category term="architecture" /><summary>Recently, team T-Rex worked on the re-architecture of the
Brand Alerts back end system, a project which we named Brand Alerts V2.
In this blog, I share our new architecture detailing some of the new AWS
powered components.</summary></entry><entry><title>Negative Sampling (in Numpy)</title><link href="https://tech.hbc.com/2018-03-23-negative-sampling-in-numpy.html" rel="alternate" type="text/html" title="Negative Sampling (in Numpy)" /><published>2018-03-23T00:00:00-05:00</published><updated>2018-03-23T00:00:00-05:00</updated><id>https://tech.hbc.com/negative-sampling-in-numpy</id><content type="html" xml:base="https://tech.hbc.com/2018-03-23-negative-sampling-in-numpy.html">&lt;p&gt;&lt;em&gt;Alright, time to have some fun exploring efficient negative sampling implementations in NumPy…&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Negative sampling is a technique used to train machine learning models that generally have several order of magnitudes more negative observations compared to positive ones. And in most cases, these negative observations are not given to us explicitly and instead, must be generated somehow. Today, I think the most prevalent usages of negative sampling is in training Word2Vec (or similar) and in training implicit recommendation systems (BPR). In this post, I’m going to frame the problem under the recommendation system setting — sorry NLP fans.&lt;/p&gt;

&lt;h1 id=&quot;problem&quot;&gt;Problem&lt;/h1&gt;

&lt;p&gt;For a given user, we have the indices of positive items corresponding to that user. These are items that the user has consumed in the past. We also know the fixed size of the entire item catalog. Oh, we will also assume that the given positive indices are ordered. This is quite a reasonable assumption because positive items are often stored in CSR interaction matrices (err… at least in the world of recommender systems).&lt;/p&gt;

&lt;p&gt;And from this information, we would like to sample from the other (non-positive) items with equal probability.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;n_items&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pos_inds&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;item_ind&lt;/th&gt;
      &lt;th&gt;Probability&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1/8&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;1/8&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;1/8&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;1/8&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;1/8&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;6&lt;/td&gt;
      &lt;td&gt;1/8&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;7&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;8&lt;/td&gt;
      &lt;td&gt;1/8&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;9&lt;/td&gt;
      &lt;td&gt;1/8&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h1 id=&quot;bad-ideas&quot;&gt;Bad Ideas&lt;/h1&gt;

&lt;p&gt;We could enumerate all the possible choices of negative items and then use &lt;code class=&quot;highlighter-rouge&quot;&gt;np.random.choice&lt;/code&gt; (or similar). However, as there are usually orders of magnitude more negative items than positive items, this is not memory friendly.&lt;/p&gt;

&lt;h1 id=&quot;incremental-guess-and-check&quot;&gt;Incremental Guess and Check&lt;/h1&gt;

&lt;p&gt;As a trivial (but feasible) solution, we are going to continually sample a random item from our catalog, and keep items if they are not positive. This will continue until we have enough negative samples.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;negsamp_incr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pos_check&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pos_inds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n_items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n_samp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot; Guess and check with arbitrary positivity check
    &quot;&quot;&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;neg_inds&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;neg_inds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n_samp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;raw_samp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;randint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n_items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pos_check&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;raw_samp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pos_inds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;neg_inds&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;raw_samp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;neg_inds&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;A major downside here is that we are sampling a single value many times — rather than sampling many values once. And although it will be infrequent, we have to re-sample if we get unlucky and randomly choose a positive item.&lt;/p&gt;

&lt;p&gt;This family of strategies will pretty much only differ by how item positivity is checked. We will go through a couple of ways to tinker with the complexity of the positivity check, but keep in mind that the number of positive items is generally small, so these modifications are actually not super-duper important.&lt;/p&gt;

&lt;h2 id=&quot;using-in-operator-on-the-raw-list&quot;&gt;Using &lt;code class=&quot;highlighter-rouge&quot;&gt;in&lt;/code&gt; operator on the raw list:&lt;/h2&gt;

&lt;p&gt;With a &lt;code class=&quot;highlighter-rouge&quot;&gt;list&lt;/code&gt;, the item positivity check is O(n) as it checks every element of the list.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;negsamp_incr_naive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pos_inds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n_items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n_samp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot; Guess and check with list membership
    &quot;&quot;&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pos_check&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;raw_samp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pos_inds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;raw_samp&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pos_inds&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;negsamp_incr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pos_check&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pos_inds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n_items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n_samp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;using-in-operator-on-a-set-created-from-the-list&quot;&gt;Using &lt;code class=&quot;highlighter-rouge&quot;&gt;in&lt;/code&gt; operator on a set created from the list:&lt;/h2&gt;

&lt;p&gt;Here, we’re going to first convert our &lt;code class=&quot;highlighter-rouge&quot;&gt;list&lt;/code&gt; into a python &lt;code class=&quot;highlighter-rouge&quot;&gt;set&lt;/code&gt; which is implemented as a hashtable. Insertion is O(1), so the conversion itself is O(n). However, once the set is created, our item positivity check (set membership) will be O(1) thereon after. So we can expect this to be a nicer strategy if &lt;code class=&quot;highlighter-rouge&quot;&gt;n_samp&lt;/code&gt; is large.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;negsamp_incr_set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pos_inds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n_items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n_samp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot; Guess and check with hashtable membership
    &quot;&quot;&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pos_inds&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pos_inds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pos_check&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;raw_samp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pos_inds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;raw_samp&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pos_inds&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;negsamp_incr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pos_check&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pos_inds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n_items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n_samp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;using-a-binary-search-on-the-list-assuming-its-sorted&quot;&gt;Using a binary search on the list (assuming it’s sorted):&lt;/h2&gt;

&lt;p&gt;One of best things you can do exploit the sortedness of a list is to use binary search. All this does is change our item positivity check to O(log(n)).&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;bisect&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bisect_left&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bsearch_in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;search_val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val_arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bisect_left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val_arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;search_val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val_arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val_arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;search_val&lt;/span&gt;
    
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;negsamp_incr_bsearch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pos_inds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n_items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n_samp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot; Guess and check with binary search
    `pos_inds` is assumed to be ordered
    &quot;&quot;&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pos_check&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bsearch_in&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;negsamp_incr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pos_check&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pos_inds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n_items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n_samp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;(Aside: LightFM, a popular recommendation system implements this in Cython. They also have a good reason to implement this in a sequential fashion — but we won’t go into that.)&lt;/p&gt;

&lt;h2 id=&quot;vectorized-binary-search&quot;&gt;Vectorized Binary Search&lt;/h2&gt;

&lt;p&gt;Here we are going to address the issue of incremental generation. All random samples will now be generated and verified in vectorized manners. The upside here is that we will reap the benefits of NumPy’s underlying optimized vector processing. Any positives found during this check will then be masked off. A new problem arises in that if we hit any positives, we will end up returning less samples than prescribed by the &lt;code class=&quot;highlighter-rouge&quot;&gt;n_samp&lt;/code&gt; parameter. Yeah, we could fill in the holes with the previously discussed strategies, but let’s just leave it at that.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;negsamp_vectorized_bsearch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pos_inds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n_items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n_samp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot; Guess and check vectorized
    Assumes that we are allowed to potentially 
    return less than n_samp samples
    &quot;&quot;&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;raw_samps&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;randint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n_items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n_samp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ss&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;searchsorted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pos_inds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;raw_samps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pos_mask&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;raw_samps&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;take&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pos_inds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ss&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'clip'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;neg_inds&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;raw_samps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pos_mask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;neg_inds&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;vectorized-pre-verified-binary-search&quot;&gt;Vectorized Pre-verified Binary Search&lt;/h2&gt;

&lt;p&gt;Finally, we are going to address both main pitfalls of the guess-and-check strategies.&lt;/p&gt;

&lt;p&gt;Vectorize: generate all our random samples at once
Pre-verify: no need for an item positivity check
We know how many negative items are available to be sampled since we have the size of our item catalog, and the number of positive items ( &lt;code class=&quot;highlighter-rouge&quot;&gt;len(pos_inds)&lt;/code&gt; is just O(1) ) to subtract off. So let’s sample uniformly over a range of imaginary negative indices with 1–1 correspondence with our negative items. This gives us the correct distribution since we have the correct number of negative item slots to sample from; however, the indices now need to be adjusted.&lt;/p&gt;

&lt;p&gt;To fix our imaginary index, we must add the number of positive items that precede each position. Assuming our positive indices are sorted, this is just a binary search (compliments of np.searchsorted). But keep in mind that in our search, for each positive index, we also need to subtract the number of positive items that precede each position.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;negsamp_vectorized_bsearch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pos_inds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n_items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n_samp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot; Pre-verified with binary search
    `pos_inds` is assumed to be ordered
    &quot;&quot;&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;raw_samp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;randint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n_items&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pos_inds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n_samp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pos_inds_adj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pos_inds&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arange&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pos_inds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ss&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;searchsorted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pos_inds_adj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;raw_samp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;side&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'right'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;neg_inds&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;raw_samp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ss&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;neg_inds&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Briefly, let’s look at how this works for all possible raw sampled values.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;n_items&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pos_inds&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# raw_samp = np.random.randint(0, n_items - len(pos_inds), size=n_samp)
# Instead of sampling, see what happens to each possible sampled value
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;raw_samp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arange&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n_items&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pos_inds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;raw_samp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# Subtract the number of positive items preceding
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pos_inds_adj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pos_inds&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arange&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pos_inds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pos_inds_adj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# Find where each raw sample fits in our adjusted positive indices
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ss&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;searchsorted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pos_inds_adj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;raw_samp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;side&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'right'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ss&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# Adjust our raw samples
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;neg_inds&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;raw_samp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ss&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;neg_inds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As desired, each of our sampled values has a 1–1 mapping to a negative item.&lt;/p&gt;

&lt;h2 id=&quot;summary-notebook-with-results&quot;&gt;Summary Notebook with Results&lt;/h2&gt;

&lt;p&gt;The notebook linked below compares the implementations discussed in this post in some example scenarios. The previously discussed “Vectorized Pre-verified Binary Search” strategy seems to be the most performant except in the edge case where &lt;code class=&quot;highlighter-rouge&quot;&gt;n_samp=1&lt;/code&gt; where vectorization no longer pays off (in that case, all strategies are very close).&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://gist.github.com/JasonTam/89ff752d7e35ec17d730c87aea96c19b#file-neg_samp_experiments-ipynb&quot;&gt;Notebook with results&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;concluding-remarks&quot;&gt;Concluding Remarks&lt;/h2&gt;

&lt;p&gt;In models that require negative sample, the sample stage is often a bottleneck in the training process. So even little optimizations like this are pretty helpful.&lt;/p&gt;

&lt;p&gt;Some further thinking:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;how to efficiently sample for many users at a time (variable length number of positive items)&lt;/li&gt;
  &lt;li&gt;at what point (sparsity of our interaction matrix) does our assumption that &lt;code class=&quot;highlighter-rouge&quot;&gt;n_neg_items &amp;gt;&amp;gt; n_pos_items&lt;/code&gt; wreck each implementation&lt;/li&gt;
  &lt;li&gt;how easy is it to modify each implementation to accommodate for custom probability distributions — if we wanted to take item frequency or expose into account&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Jason Tam</name></author><category term="numpy" /><category term="sampling" /><category term="python" /><category term="algorithms" /><summary>Alright, time to have some fun exploring efficient negative sampling implementations in NumPy…</summary></entry><entry><title>Airing Out A New Job System</title><link href="https://tech.hbc.com/2018-03-05-airing-out-a-new-job-system.html" rel="alternate" type="text/html" title="Airing Out A New Job System" /><published>2018-03-05T00:00:00-05:00</published><updated>2018-03-05T00:00:00-05:00</updated><id>https://tech.hbc.com/airing-out-a-new-job-system</id><content type="html" xml:base="https://tech.hbc.com/2018-03-05-airing-out-a-new-job-system.html">&lt;p&gt;In this article I’ll be sharing some of the knowledge the Data team at HBC Tech picked up in replacing our old job system with Apache Airflow.
We undertook the decision to overhaul our job orchestration system a few months ago due to a number of reasons but have now successfully migrated all our data ingestion jobs to the new system.&lt;/p&gt;

&lt;p&gt;Firstly a little bit about our team. The Data Team at HBC Tech is responsible for constructing, delivering, and supporting all systems and services which enable self-service analytics
and data science across all banners and all functions at Hudson’s Bay Corp (HBC).
The scope of responsibilities begins with data ingestion, and ends with supporting our user community of BI tool uses and data scientists.
These varieties of sources and types of processing lead us to review our job orchestration and I’ll be sharing the challenges involved, attempted solutions and lessons learned.&lt;/p&gt;

&lt;h2 id=&quot;in-the-beginning&quot;&gt;In the beginning…&lt;/h2&gt;

&lt;p&gt;The Data team has various jobs that handle the ingestion of data from multiple sources in a variety of formats.
Each of these sources have either strict integration guidelines regarding time of ingestion or require coordination between various jobs to ensure correct ingestion.
This leads to numerous issues surrounding job scheduling, coordination and success criteria. We solved these issues with using our internally built job system &lt;a href=&quot;https://github.com/gilt/sundial&quot;&gt;Sundial&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As times changed, we wanted to take a fresh approach to how jobs were provisioned from a AWS point of view.
The jobs we use are lightweight and having them running on ECS instances around the clock when they were idle was deemed as a waste of resources.
It made sense to us to move the jobs to AWS batch instances to limit the cost of running jobs while still maintaining all the benefits of ECS.
This lead to some problems with our Sundial job system due to the fact that at the time it didn’t support AWS Batch.
This has changed since then with some great work by our personalisation team which you can read more about &lt;a href=&quot;http://tech.hbc.com/2017-08-04-sundial-batch.html&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;time-for-something-new&quot;&gt;Time for something new…&lt;/h2&gt;

&lt;p&gt;The team decided it was time to take a fresh approach to how we ran our jobs, which kicked off the investigation of a new system.
The investigation took place over a few weeks and spanned across a number of open source solutions.
We outlined that a new job system should at minimum support a number of features&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;It should be able to integrate with AWS Batch&lt;/li&gt;
  &lt;li&gt;Have a rich feature list inline with what was available in Sundial&lt;/li&gt;
  &lt;li&gt;Have the ability to contribute new features and expand existing functionality&lt;/li&gt;
  &lt;li&gt;Have the ability to have rich visualization of jobs and their dependencies&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We were able to whittle down the numerous possibilities to three possible solutions.
The first being Spotify’s Luigi system, available &lt;a href=&quot;https://github.com/spotify/luigi&quot;&gt;here&lt;/a&gt; which is a really great solution and was ticking most of our boxes.
We decided it was worthwhile to generate a proof of concept approach to really trial the solution. Luigi has been around for a long time and has rich user base which was a positive factor for us when considering it as our solution.
It was a really close call between Luigi and the solution that we picked mainly because Luigi provides a lot of the features we are looking for.&lt;/p&gt;

&lt;p&gt;The second solution we investigated was LinkedIn’s Azkaban workflow manager, available &lt;a href=&quot;https://github.com/azkaban/azkaban&quot;&gt;here&lt;/a&gt;.
Being based in java was probably closer to our comfort zone which was a plus for this project.&lt;/p&gt;

&lt;p&gt;What we found out was that although it satisfied our needs with regards rich visualization of the jobs and their dependencies there was some drawbacks to the solution.
It seems to be solely focused on orchestrating hadoop based jobs while we require a solution that allows us to interact with a number of possible executors, namely AWS Batch and EMR.
It’s feature list is expansive and could prove a perfect solution for those interested in running only hadoop based jobs.&lt;/p&gt;

&lt;p&gt;The final solution was AirBnB’s Airflow solution which at the time was just picked up by the &lt;a href=&quot;https://github.com/apache/incubator-airflow&quot;&gt;Apache Foundation&lt;/a&gt;.
Airflow was known to some of the people here in HBC but when they investigated it, it was still in its infancy and was missing a lot of features.
We decided to see what progress was made since the last time it was looked at and we were pleased with the improvements.
It was ticking all the boxes and after one of the engineers here did a proof of concept we decided it was the way forward for us.&lt;/p&gt;

&lt;p&gt;For a quick reference between Luigi vs Airflow, this is a great &lt;a href=&quot;http://bytepawn.com/luigi-airflow-pinball.html&quot;&gt;link&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;the-first-attempt&quot;&gt;The first attempt…&lt;/h2&gt;

&lt;p&gt;Implementing the Airflow solution was a slight bit tricky for us at the beginning.
A lot of the team’s expertise was based in Scala, so implementing a python based solution created a great opportunity to learn about the language.&lt;/p&gt;

&lt;p&gt;Early into the project one of our interests was to figure out how to deploy Airflow to our AWS account and how do we then deploy the DAGs to the instance.
We addressed the first by standing up an ECS cluster with Airflow installed on it.
For the second we setup  the ECS instances with a cron job that would pull down any changes that was pushed to the S3 bucket.&lt;/p&gt;

&lt;p&gt;We were able to successfully migrate all our existing jobs into DAGs and with some of the additions we made to the code allowed us to integrate nicely with our AWS tools such as Batch,
SNS and Lambda&lt;/p&gt;

&lt;p&gt;In this attempt, we decided to fork the master branch of Airflow and use that as a source for us to deploy to ECS.
This gave us some benefits such as customizing some of Airflows base code to provide us with some extra functionality.
After some soul searching however, we decided that this perhaps was not the best approach. Maintaining the branch and our additional code could create a maintenance issue for us in the future,
for example an incompatible change with our additional code. We decided that there must be a better way.&lt;/p&gt;

&lt;h2 id=&quot;the-refinement&quot;&gt;The refinement…&lt;/h2&gt;

&lt;p&gt;In the first attempt we figured out lot of the early problems with Airflow but we decided that maintaining the forked version was going to cause trouble down the road.
To try fix this, we decided to get a vanilla based Airflow instance up and running. This was partly to help with maintaining the system going forward since we didn’t want to have to constantly merge changes from the master branch into our fork.
This decision coupled with our earlier decision to change some of Airflows base code caused some problems for us.&lt;/p&gt;

&lt;p&gt;We decided to go with the latest release of Airflow (1.9) and create a fully dockerised version of Airflow with our DAG’s.
Luckily there are people already working in this space and we were able to source a lot of the work required from this &lt;a href=&quot;https://github.com/puckel/docker-airflow&quot;&gt;repository&lt;/a&gt;.&lt;br /&gt;
To migrate the base code that we changed, we found out that Airflow had already solved this problems via it’s &lt;a href=&quot;https://airflow.incubator.apache.org/plugins.html&quot;&gt;Plugin system&lt;/a&gt;.&lt;br /&gt;
The plugin system gives us a nice way of expanding our functionality and hopefully releasing our plugins as an open sourced in the future.&lt;/p&gt;

&lt;p&gt;This process had its challenges but there is a great community of Airflow users and we were able to get a lot of help. Some of the sources we used were Stack Overflow and the ever busy Apache Airflow gitter.&lt;/p&gt;

&lt;h2 id=&quot;next-steps&quot;&gt;Next steps&lt;/h2&gt;

&lt;p&gt;Now that we have our Airflow setup and jobs migrated we are experiencing the full benefits of what airflow has to offer.
Within a day we were able to create plugins that allow us to integrate with AWS EMR. This allowed the creation of DAG’s that will in the future support the migration of our ELT process to ETL using Spark, a big 2018 and 2019 initiative here at HBC Tech.
We are eagerly awaiting the improved DAG deployment system thats coming to Airflow to improve our deployment process but we feel we are in a good place with it at the moment.&lt;/p&gt;

&lt;p&gt;The Data teams roadmap has multiple exciting challenges to solve from ingestion, transformation to loading.
Having our Airflow setup, we feel we are in a good position now to tackle these problems.&lt;/p&gt;

&lt;p&gt;A big callout to &lt;a href=&quot;https://github.com/dmateusp&quot;&gt;Daniel Mateus Pires&lt;/a&gt; who acted as our go to person in all things Airflow.&lt;/p&gt;

&lt;p&gt;Over the new month or so we are really going to ramp up and if you’re interested in helping us solve these problems, take a look at our careers page &lt;a href=&quot;https://www.linkedin.com/jobs/search/?f_C=167354%2C1453743&amp;amp;locationId=OTHERS.worldwide&quot;&gt;here&lt;/a&gt; and get in touch.&lt;/p&gt;</content><author><name>[&quot;Terry McCartan&quot;]</name></author><category term="airflow" /><category term="aws" /><category term="docker" /><category term="tech" /><category term="data" /><category term="etl" /><category term="scheduling" /><summary>In this article I’ll be sharing some of the knowledge the Data team at HBC Tech picked up in replacing our old job system with Apache Airflow.
We undertook the decision to overhaul our job orchestration system a few months ago due to a number of reasons but have now successfully migrated all our data ingestion jobs to the new system.</summary></entry></feed>
